<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.2.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2020-07-12T12:16:12-07:00</updated><id>/</id><title type="html">Taylor Firman</title><subtitle>Just a repository for the occasional statistical stumble...</subtitle><entry><title type="html">Chasing .400</title><link href="/blog/Chasing400/" rel="alternate" type="text/html" title="Chasing .400" /><published>2020-07-12T00:00:00-07:00</published><updated>2020-07-12T00:00:00-07:00</updated><id>/blog/Chasing400</id><content type="html" xml:base="/blog/Chasing400/">&lt;head&gt;
&lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot; /&gt;
&lt;meta name=&quot;twitter:creator&quot; content=&quot;@tefirman51&quot; /&gt;
&lt;meta name=&quot;twitter:site&quot; content=&quot;@tefirman51&quot; /&gt;
&lt;meta name=&quot;twitter:title&quot; content=&quot;Chasing .400&quot; /&gt;
&lt;meta name=&quot;twitter:description&quot; content=&quot;The odds of someone hitting .400 this season may be better than you think...&quot; /&gt;
&lt;meta name=&quot;twitter:image:src&quot; content=&quot;https://tefirman.github.io/images/BaseballMask.png&quot; /&gt;
&lt;meta name=&quot;twitter:image:width&quot; content=&quot;280&quot; /&gt;
&lt;meta name=&quot;twitter:image:height&quot; content=&quot;150&quot; /&gt;
&lt;script src=&quot;/assets/js/jquery.min.js&quot;&gt;&lt;/script&gt; 
&lt;script&gt; 
$(function(){
  $(&quot;#includedContent&quot;).load(&quot;/images/SeasonAvgDistributions.html&quot;); 
});
&lt;/script&gt;
&lt;script&gt; 
$(function(){
  $(&quot;#includedContent2&quot;).load(&quot;/images/FourHundredProbByCareerAvg.html&quot;); 
});
&lt;/script&gt;
&lt;script&gt; 
$(function(){
  $(&quot;#includedContent3&quot;).load(&quot;/images/Prob400Table.html&quot;); 
});
&lt;/script&gt;

&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;
&lt;script async=&quot;&quot; src=&quot;https://www.googletagmanager.com/gtag/js?id=UA-141691742-16&quot;&gt;&lt;/script&gt;
&lt;script&gt;
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-141691742-16');
&lt;/script&gt;

&lt;/head&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML&quot; async=&quot;&quot;&gt;&lt;/script&gt;

&lt;p&gt;With baseball starting back up in a couple of weeks, the shortened 60-game season brings up an interesting question: what are the odds that someone hits for a .400 batting average, a feat last accomplished in &lt;a href=&quot;https://en.wikipedia.org/wiki/Ted_Williams#1941&quot;&gt;1941 by Ted Williams?&lt;/a&gt; Pitching has greatly improved since then, so the probability in a regular 162-game season is astronomically low, but you would have to think that the shortened season improves those odds significantly. It’s much easier to believe someone could have a flukishly hot 60-game stretch compared to an entire 162-game season. I am obviously &lt;a href=&quot;https://www.mlb.com/news/candidates-to-hit-400-2020-mlb-season&quot;&gt;not the first person&lt;/a&gt; to think about this question, but I thought it would be fun/helpful to break things down in a game theory mindset. To simplify things a bit, let’s look at this in three steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Given a player’s career batting average and assuming four at bats per game, what are the odds that player ends up with a season batting average of .400?&lt;/li&gt;
  &lt;li&gt;Given the distribution of career batting averages among current MLB players, what are the odds of at least one player hitting .400?&lt;/li&gt;
  &lt;li&gt;Does accounting for the variance in the number of at bats per game change these probabilities at all?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Starting with point #1, let’s assume that a player gets &lt;script type=&quot;math/tex&quot;&gt;N_{ab}&lt;/script&gt; at bats over the course of the season and that their career batting average, &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;, is representative of the underlying probability of them getting a hit in each at bat. With these assumptions, we can approximate the distribution of the total number of hits over these at bats, which we’ll call &lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt;, using a &lt;a href=&quot;https://en.wikipedia.org/wiki/Binomial_distribution&quot;&gt;binomial distribution&lt;/a&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P_h(N,N_{ab},p) = \frac{1}{Q} \frac{N_{ab}!}{N!(N_{ab} - N)!} p^{N} (1 - p)^{(N_{ab} - N)}&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;Q = \sum_{n=0}^{N_{ab}} \frac{N_{ab}!}{n!(N_{ab} - n)!} p^{n} (1 - p)^{(N_{ab} - n)}&lt;/script&gt;

&lt;p&gt;This is easily converted to a distribution of season batting averages by dividing the input number of hits by the number of total at bats (240 in the case of a 60-game season). The graph below illustrates the probability of a player getting a certain &lt;i&gt;season&lt;/i&gt; batting average given their &lt;i&gt;career&lt;/i&gt; batting average (different color circles), and as you can see, these distributions can get pretty wide.&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;div id=&quot;includedContent&quot;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s entirely realistic for a player to hit 50 points above their career batting average this year, but this means that even with the shortened season, somebody has to be in at least the low .300’s to even have an iota of a chance of hitting .400 for the season. In fact, if we sum up the probability of season averages above .400, a player with a career average of .305 (that of &lt;a href=&quot;https://www.baseball-reference.com/players/t/troutmi01.shtml&quot;&gt;Mike Trout&lt;/a&gt;) only has a 0.11% chance of accomplishing the feat. Keep in mind that this is a significant improvement over the 0.000013% chance he would have in a full 162-game season… In case you have a particular player in mind, the interactive graph below plots the probability of hitting .400 as a function of a player’s career batting average (blue dots) and even allows you to change the number of games in the season via the slidebar at the bottom.&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;div id=&quot;includedContent2&quot;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These odds may seem negligible, but when you think about it, with ~270 players in the entire league, it seems reasonable to think that at least one of them might get hot and come close, right? This brings us to point #2: let’s try to calculate the probability of &lt;i&gt;at least&lt;/i&gt; one MLB player hitting .400. To start, we can formalize the probability of a player hitting .400 using the same definitions laid out above:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P_{.400}(N_{ab},p) = \sum_{n=\lceil 0.4 N_{ab} \rceil}^{N_{ab}} P_{h}(n,N_{ab},p)&lt;/script&gt;

&lt;p&gt;From there, the probability of an individual player &lt;i&gt;not&lt;/i&gt; hitting .400 would be &lt;script type=&quot;math/tex&quot;&gt;1 - P_{.400}&lt;/script&gt;, the probability of &lt;i&gt;everyone&lt;/i&gt; not hitting .400 would be the product of those values for every single player, and finally, the probability of at least one player hitting .400 would be the &lt;a href=&quot;https://en.wikipedia.org/wiki/Complementary_event&quot;&gt;complement&lt;/a&gt; of that product:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P_{tot}(N_{ab}) = 1 - \prod_{p} [1 - P_{.400}(N_{ab},p)]^{N_p}&lt;/script&gt;

&lt;p&gt;where &lt;script type=&quot;math/tex&quot;&gt;N_p&lt;/script&gt; is the number of players with a career batting average of &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;. The last piece of the puzzle is deciding what subset of players we should be looking at to produce a realistic view of this season’s collection of MLB talent. We definitely don’t want to include any young players that had a fluky cup of coffee in the majors to cover for an injured teammate. To account for this, we’re only going to consider players that started at least half of the 2019 season (according to &lt;a href=&quot;https://github.com/tefirman/StatisticalStumbles/blob/master/PlayerStats.csv&quot;&gt;stats&lt;/a&gt; pulled from &lt;a href=&quot;https://www.baseball-reference.com/&quot;&gt;Baseball Reference&lt;/a&gt;). For the &lt;a href=&quot;https://github.com/tefirman/StatisticalStumbles/blob/master/FourHundredProbByCareerAvg.xlsx&quot;&gt;195 players&lt;/a&gt; who meet this criteria, after all of this complicated math, the probability that at least one of them hits for .400 is a whopping… 3.4%. Probably not going to happen, but again, an astronomical improvement over the 0.002% chance in a regular 162-game season (second column of the first table below). These numbers are pretty close to those of &lt;a href=&quot;https://twitter.com/tangotiger?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor&quot;&gt;Tom Tango&lt;/a&gt;, so it sounds like we’re doing something right!&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;div id=&quot;includedContent3&quot;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The one final wrinkle that might affect these odds is removing the assumption of &lt;i&gt;exactly&lt;/i&gt; four at bats per game, as brought up in point #3. Someone very well could get five at bats one day and three at bats the next, so how do we account for this variation accumulating over the course of the entire season? We can start by creating an empirical distribution of the number of at bats per game from the 195 “typical” players mentioned above. Since the distribution of the sum of two random variables is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Convolution&quot;&gt;convolution of their respective distributions&lt;/a&gt;, a season-long distribution would simply be the single-game distribution convolved with itself 59 times. If we call this season-long distribution &lt;script type=&quot;math/tex&quot;&gt;S(n)&lt;/script&gt;, the probability of at least one player hitting .400 is just a weighted sum over all possible values for the number of at bats:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P_{rand} = \sum_{n=0}^{\inf} S(n) P_{tot}(n)&lt;/script&gt;

&lt;p&gt;Ultimately, accounting for this only increases the probability to 4.4% when applied to the same 195 players as above (third column of the first table above), but it does affect things! I think the logic is that some players will wind up with fewer than 240 at bats over the course of the season, requiring fewer hits to reach .400 and making it easier to join &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_Major_League_Baseball_players_with_a_.400_batting_average_in_a_season&quot;&gt;the ranks&lt;/a&gt; of Rogers Hornsby, Shoeless Joe Jackson, and Ty Cobb. The red circles in the second figure illustrate a generic player’s probability of hitting .400 when accounting for the variance in at bats over a season, and as you can see, the difference is noticeable but miniscule. Even if we look up each player’s respective at bats per game distribution and use that to produce individualized &lt;script type=&quot;math/tex&quot;&gt;S(n)&lt;/script&gt; functions, the probability of at least one player hitting .400 still sticks around 3.8%. The second table above lists the individual probabilities for every player in the league when we account for their respective at bats per game distribution.&lt;/p&gt;

&lt;p&gt;Honestly, I hope it happens! I know some people are going to roll their eyes at it and say it doesn’t count, but look at the odds we just calculated. Even with the shortened season, even if someone barely misses the mark by a few points, it’s still a pretty tremendous feat. Maybe it will be forgotten sooner than most records, but it’ll be a &lt;a href=&quot;https://www.mlb.com/cut4/list-of-the-weirdest-and-most-unbreakable-mlb-records-c263183898&quot;&gt;fun piece of baseball ephemera&lt;/a&gt;, like Charles Radbourn’s 59 wins in a season, Red Barrett’s 58-pitch complete game, and Fernando Tatis’ two grand slams in the same inning. Baseball is full of weird anomalies, so I hope someone meets the mark, even if it does have an asterisk next to it.&lt;/p&gt;

&lt;h6&gt;The &lt;a href=&quot;https://github.com/tefirman/StatisticalStumbles/blob/master/FourHundredSeason.py&quot;&gt;python code&lt;/a&gt; and &lt;a href=&quot;https://github.com/tefirman/StatisticalStumbles/blob/master/FourHundredProbByCareerAvg.xlsx&quot;&gt;data&lt;/a&gt; used to generate the values and figures above are available on &lt;a href=&quot;https://github.com/tefirman&quot;&gt;my GitHub page&lt;/a&gt;.

&lt;/h6&gt;</content><summary type="html">The odds of someone hitting .400 this season may be better than you think...</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/images/BaseballMask.png" /></entry><entry><title type="html">Trivia: Quarantine Edition</title><link href="/blog/TriviaQuarantine/" rel="alternate" type="text/html" title="Trivia: Quarantine Edition" /><published>2020-03-25T00:00:00-07:00</published><updated>2020-03-25T00:00:00-07:00</updated><id>/blog/TriviaQuarantine</id><content type="html" xml:base="/blog/TriviaQuarantine/">&lt;head&gt;
&lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot; /&gt;
&lt;meta name=&quot;twitter:creator&quot; content=&quot;@tefirman51&quot; /&gt;
&lt;meta name=&quot;twitter:site&quot; content=&quot;@tefirman51&quot; /&gt;
&lt;meta name=&quot;twitter:title&quot; content=&quot;Trivia: Quarantine Edition&quot; /&gt;
&lt;meta name=&quot;twitter:description&quot; content=&quot;Most trivia nerds are already self-isolated... Let's do this!!!&quot; /&gt;
&lt;meta name=&quot;twitter:image:src&quot; content=&quot;https://tefirman.github.io/images/TriviaQuarantine.png&quot; /&gt;
&lt;meta name=&quot;twitter:image:width&quot; content=&quot;280&quot; /&gt;
&lt;meta name=&quot;twitter:image:height&quot; content=&quot;150&quot; /&gt;
&lt;script src=&quot;/assets/js/jquery.min.js&quot;&gt;&lt;/script&gt; 

&lt;iframe src=&quot;https://trivia-quarantine.herokuapp.com/&quot; height=&quot;600&quot; width=&quot;100%&quot;&gt;&lt;/iframe&gt;




&lt;/head&gt;</content><summary type="html">Most trivia nerds are already self-isolated... Let's do this!!!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/images/TriviaQuarantine.png" /></entry><entry><title type="html">Riddler Answer:Fool the Bank</title><link href="/blog/RiddlerCounterfeit/" rel="alternate" type="text/html" title="Riddler Answer:&lt;br&gt;Fool the Bank" /><published>2019-08-25T00:00:00-07:00</published><updated>2019-08-25T00:00:00-07:00</updated><id>/blog/RiddlerCounterfeit</id><content type="html" xml:base="/blog/RiddlerCounterfeit/">&lt;head&gt;
&lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot; /&gt;
&lt;meta name=&quot;twitter:creator&quot; content=&quot;@tefirman51&quot; /&gt;
&lt;meta name=&quot;twitter:site&quot; content=&quot;@tefirman51&quot; /&gt;
&lt;meta name=&quot;twitter:title&quot; content=&quot;Riddler Answer: Fool the Bank&quot; /&gt;
&lt;meta name=&quot;twitter:description&quot; content=&quot;Put on your Hamburglar costumes, Riddler fans! This week's Riddler takes a foray into racketeering...&quot; /&gt;
&lt;meta name=&quot;twitter:image:src&quot; content=&quot;https://tefirman.github.io/images/FoolTheBankWidgetPic.jpg&quot; /&gt;
&lt;meta name=&quot;twitter:image:width&quot; content=&quot;280&quot; /&gt;
&lt;meta name=&quot;twitter:image:height&quot; content=&quot;150&quot; /&gt;
&lt;script src=&quot;/assets/js/jquery.min.js&quot;&gt;&lt;/script&gt; 

&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;
&lt;script async=&quot;&quot; src=&quot;https://www.googletagmanager.com/gtag/js?id=UA-141691742-15&quot;&gt;&lt;/script&gt;
&lt;script&gt;
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-141691742-15');
&lt;/script&gt;

&lt;/head&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML&quot; async=&quot;&quot;&gt;&lt;/script&gt;

&lt;p&gt;Put on your Hamburglar costumes, Riddler fans! &lt;a href=&quot;https://fivethirtyeight.com/features/can-you-fool-the-bank-with-your-counterfeit-bills/&quot;&gt;This week’s puzzle&lt;/a&gt; takes a foray into racketeering by putting us in the shoes of an expert counterfeiter specializing in $100 bills. In one last hurrah, we need to optimize the number of fake bills to deposit alongside $2500 worth of real bills, knowing that the bank will randomly inspect 5% of them (rounded up) and have a 25% chance of detecting fake bill after inspecting it. Let’s do this thing…&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;To start, let’s define &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; as the portion of bills inspected, &lt;script type=&quot;math/tex&quot;&gt;R&lt;/script&gt; as the number of real bills you deposit, and &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt; as the number of fake bills you deposit. This would put the number of randomly inspected bills at&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;n = \text{ceil}(a(R + F)).&lt;/script&gt;

&lt;p&gt;From here, we need to think about the probability (and therefore &lt;a href=&quot;https://en.wikipedia.org/wiki/Combinatorics&quot;&gt;combinatorics) of how many fake/real bills the bank chose to inspect. If we set &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; as the number of fake bills the bank happens to scrutinize, the number of ways the bank could choose &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; fake bills and &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; bills total can be defined as&lt;/a&gt;&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\Omega(f) = \frac{F!}{f!(F - f)!} \times \frac{R!}{(n - f)!(R - n + f)!}.&lt;/script&gt;

&lt;p&gt;This would put the total number of inspection combinations at&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;Q = \sum_{f=0}^{n} \Omega(f).&lt;/script&gt;

&lt;p&gt;Let’s also define &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt; as the probability of a fake’s detection. To calculate the probability of success given that &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; fake bills were analyzed, we can normalize &lt;script type=&quot;math/tex&quot;&gt;\Omega&lt;/script&gt; using &lt;script type=&quot;math/tex&quot;&gt;Q&lt;/script&gt; and add a factor of &lt;script type=&quot;math/tex&quot;&gt;(1 - p)^{f}&lt;/script&gt; to account for the bank teller missing the fakes:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P(f) = \frac{\Omega(f)}{Q} (1 - p)^{f}.&lt;/script&gt;

&lt;p&gt;Finally, we can sum this function over all possible values of &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; and multiply by the cash to be gained to get the expected return of our hypothetical caper:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;E(R,F) = 100(R + F)\sum_{f=0}^{n} P(f).&lt;/script&gt;

&lt;p&gt;Using &lt;script type=&quot;math/tex&quot;&gt;a = 0.05&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;p = 0.25&lt;/script&gt;, and &lt;script type=&quot;math/tex&quot;&gt;R = 25&lt;/script&gt;, we can vary &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt; to produce the graph seen below and the maximum expected return for our efforts occurs at &lt;script type=&quot;math/tex&quot;&gt;F = 55&lt;/script&gt; with a 47.0% probability of winning $8000, suggesting an expected return of $3756.83. But what if the bank decides to modify their protocols and scrutinize a larger portion of the bills? Or what if their techniques improve and increase their detection probablities? Or what if we come into more real bills to use in our endeavor? Play around with the widget below and see how it changes things! Have fun tinkering, Riddler Nation!&lt;/p&gt;

&lt;iframe src=&quot;https://riddler-fool-the-bank.herokuapp.com/&quot; height=&quot;600&quot; width=&quot;100%&quot;&gt;&lt;/iframe&gt;

&lt;h6&gt;The &lt;a href=&quot;https://github.com/tefirman/RiddlerCode/blob/master/Riddler_Aug25_Counterfeits.py&quot;&gt;python code&lt;/a&gt; used to generate the values and figures above are available on &lt;a href=&quot;https://github.com/tefirman&quot;&gt;my GitHub page&lt;/a&gt;.


&lt;/h6&gt;</content><summary type="html">Put on your Hamburglar costumes, Riddler fans! This week's Riddler takes a foray into racketeering...</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/images/FoolTheBankWidgetPic.jpg" /></entry><entry><title type="html">Presidential Vocabulary</title><link href="/blog/VocabularEntropy/" rel="alternate" type="text/html" title="Presidential Vocabulary" /><published>2019-08-24T00:00:00-07:00</published><updated>2019-08-24T00:00:00-07:00</updated><id>/blog/VocabularEntropy</id><content type="html" xml:base="/blog/VocabularEntropy/">&lt;head&gt;
&lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot; /&gt;
&lt;meta name=&quot;twitter:creator&quot; content=&quot;@tefirman51&quot; /&gt;
&lt;meta name=&quot;twitter:site&quot; content=&quot;@tefirman51&quot; /&gt;
&lt;meta name=&quot;twitter:title&quot; content=&quot;Presidential Vocabulary&quot; /&gt;
&lt;meta name=&quot;twitter:description&quot; content=&quot;As we have found out in recent weeks, words absolutely matter, especially coming from a President of the United States...&quot; /&gt;
&lt;meta name=&quot;twitter:image:src&quot; content=&quot;https://tefirman.github.io/images/PresidentDictionary.jpg&quot; /&gt;
&lt;meta name=&quot;twitter:image:width&quot; content=&quot;280&quot; /&gt;
&lt;meta name=&quot;twitter:image:height&quot; content=&quot;150&quot; /&gt;

&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;
&lt;script async=&quot;&quot; src=&quot;https://www.googletagmanager.com/gtag/js?id=UA-141691742-14&quot;&gt;&lt;/script&gt;
&lt;script&gt;
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-141691742-14');
&lt;/script&gt;

&lt;/head&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML&quot; async=&quot;&quot;&gt;&lt;/script&gt;

&lt;p&gt;It seems immensely difficult to form a presidential voice that’s strong, reassuring, informative, and fifty other adjectives all at once. Too sophisticated: you’re an out-of-touch elitist. Too simple: you’re unqualified for the most complex job on the planet. Too soft: you’re spineless. Too strong: you’re heartless. In an attempt to better characterize presidential vocabularies, I went through every presidential transcript in &lt;a href=&quot;https://www.presidency.ucsb.edu/&quot;&gt;UC Santa Barbara’s American Presidency Project&lt;/a&gt; and analyzed the relative frequencies of different words. I recognize that a president’s lexical fingerprint extends far beyond just the words they choose, but this will hopefully be a good start.&lt;/p&gt;

&lt;p&gt;Because less material available as you go further back in time, we’ll focus on presidents with more than 1,000 documents in the database, i.e. Herbert Hoover and onward. Furthermore, we’ll exclude functional words like “the”, “is”, “where”, etc. and only consider descriptive lexical words. Let’s start with a fun, interactive way of looking at things! Below is an interactive widget comparing the frequencies of different words (y-axis) across different presidents (x-axis). You can type in as many words as you want in the search bar for a side-by-side comparison of those words. You can also break things down by president, by party, or not break them down at all, i.e. frequencies over all presidents combined. Play around with it and see if you can find any interesting comparisons!&lt;/p&gt;

&lt;iframe src=&quot;https://presidentialvocabs.herokuapp.com&quot; height=&quot;600&quot; width=&quot;100%&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Here are a few interesting examples to check out:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;“Democrats” vs. “Republicans” broken down by party&lt;/strong&gt;: Apparently, politicians are obsessed with whatever party they’re not in because Republican presidents are much more likely to mention “democrats” over “republicans” and vice versa for Democratic presidents.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Presidential last names broken down by president&lt;/strong&gt;: This provides an interesting perspective on which presidents greatly influenced their successors (Roosevelt/Kennedy) and which presidents are the biggest narcissists (Hoover/Trump).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“America” vs. “American” vs. “Americans” over all presidents&lt;/strong&gt;: I might be reading a bit too far into this one, but it’s interesting that presidents tend to emphasize “America” and something being “American” a bit more than actual “Americans”.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will be the first to point out that the comparisons above don’t paint the whole picture. They depend heavily on the exact word you choose to look at and the interpretations largely depend on the observer. To eliminate this subjectivity and get a broader lexical characterization, we can look at statistics that apply across a president’s entire vocabulary. One such metric could be the average number of syllables per word for each president, loosely gauging verbal complexity. Along the same lines, we can get a little more sophisticated and measure the &lt;a href=&quot;https://en.wikipedia.org/wiki/Entropy_(information_theory)&quot;&gt;informational entropy&lt;/a&gt; of each president’s vocabulary. Explicitly, we will define it as&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;S = - \sum_{i} P_i \log_2 P_i&lt;/script&gt;

&lt;p&gt;where &lt;script type=&quot;math/tex&quot;&gt;P_i&lt;/script&gt; is the probability of a particular word (&lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt;) being said. In a nutshell, this quantity represents how much information is contained in each word on average. If I only use eight unique words equally (corresponding to &lt;script type=&quot;math/tex&quot;&gt;S=3&lt;/script&gt;), my speech patterns are pretty predictable and I can’t be expected to provide any sort of detailed description. But if I use 3500 unique words equally (corresponding to the presidential average of &lt;script type=&quot;math/tex&quot;&gt;S=11.8&lt;/script&gt;), I can speak with much more precision. The table below contains both statistics for every president since Hoover and an interesting trend emerges: the number of syllables per word gradually decreases with time while informational entropy varies president to president regardless of time. And before anyone jumps to conclusions, if we average over parties instead of presidents, both parties are equal at 2.068 syllables per word and &lt;script type=&quot;math/tex&quot;&gt;S=11.74&lt;/script&gt;. (By the way, is anyone surprised that Trump is at the bottom of both lists? While we all intuitively knew that 45 wasn’t the bright bulb in the box, now we have statistical proof…)&lt;/p&gt;

&lt;style&gt;
table {
    border-spacing: 0;
    width: 100%;
    border: 1px solid #ddd;
    line-height: 1
}

th {
    cursor: pointer;
}

th, td {
    text-align: left;
    padding: 0px;
    vertical-align: middle;
    min-height: 1px;
    border-left: 1px solid #ddd;
    border-right: 1px solid #ddd;
}

tr:nth-child(even) {
    background-color: #f2f2f2
}
&lt;/style&gt;

&lt;h3&gt;Information Contained in Presidential Vocabularies&lt;/h3&gt;
&lt;table id=&quot;myTable&quot;&gt;
  &lt;tr height=&quot;50&quot;&gt;
    &lt;th onclick=&quot;sortTable(0)&quot;&gt;President&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber(1)&quot;&gt;Syllables Per Word&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber(2)&quot;&gt;Informational Entropy (Bits)&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Barack Obama&lt;/td&gt;
    &lt;td&gt;2.04&lt;/td&gt;
    &lt;td&gt;11.63&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Donald J. Trump&lt;/td&gt;
    &lt;td&gt;1.943&lt;/td&gt;
    &lt;td&gt;11.18&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;George W. Bush&lt;/td&gt;
    &lt;td&gt;2.012&lt;/td&gt;
    &lt;td&gt;11.39&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;William J. Clinton&lt;/td&gt;
    &lt;td&gt;2.013&lt;/td&gt;
    &lt;td&gt;11.48&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;George Bush&lt;/td&gt;
    &lt;td&gt;2.063&lt;/td&gt;
    &lt;td&gt;11.7&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Ronald Reagan&lt;/td&gt;
    &lt;td&gt;2.081&lt;/td&gt;
    &lt;td&gt;11.76&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Jimmy Carter&lt;/td&gt;
    &lt;td&gt;2.143&lt;/td&gt;
    &lt;td&gt;11.56&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Gerald R. Ford&lt;/td&gt;
    &lt;td&gt;2.129&lt;/td&gt;
    &lt;td&gt;11.45&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Richard Nixon&lt;/td&gt;
    &lt;td&gt;2.158&lt;/td&gt;
    &lt;td&gt;11.51&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Lyndon B. Johnson&lt;/td&gt;
    &lt;td&gt;2.073&lt;/td&gt;
    &lt;td&gt;11.61&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;John F. Kennedy&lt;/td&gt;
    &lt;td&gt;2.207&lt;/td&gt;
    &lt;td&gt;11.49&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Dwight D. Eisenhower&lt;/td&gt;
    &lt;td&gt;2.208&lt;/td&gt;
    &lt;td&gt;11.53&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Harry S. Truman&lt;/td&gt;
    &lt;td&gt;2.16&lt;/td&gt;
    &lt;td&gt;11.43&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Franklin D. Roosevelt&lt;/td&gt;
    &lt;td&gt;2.146&lt;/td&gt;
    &lt;td&gt;11.61&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Herbert Hoover&lt;/td&gt;
    &lt;td&gt;2.237&lt;/td&gt;
    &lt;td&gt;11.53&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;script&gt;
function sortTable(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById(&quot;myTable&quot;);
  switching = true;
  //Set the sorting direction to ascending:
  dir = &quot;desc&quot;; 
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i &lt; (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].getElementsByTagName(&quot;TD&quot;)[n];
      y = rows[i + 1].getElementsByTagName(&quot;TD&quot;)[n];
      /*check if the two rows should switch place,
      based on the direction, asc or desc:*/
      if (dir == &quot;asc&quot;) {
        if (x.innerHTML.toLowerCase() &gt; y.innerHTML.toLowerCase()) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      } else if (dir == &quot;desc&quot;) {
        if (x.innerHTML.toLowerCase() &lt; y.innerHTML.toLowerCase()) {
          //if so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      //Each time a switch is done, increase this count by 1:
      switchcount ++;      
    } else {
      /*If no switching has been done AND the direction is &quot;asc&quot;,
      set the direction to &quot;desc&quot; and run the while loop again.*/
      if (switchcount == 0 &amp;&amp; dir == &quot;desc&quot;) {
        dir = &quot;asc&quot;;
        switching = true;
      }
    }
  }
}

function sortTableNumber(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById(&quot;myTable&quot;);
  switching = true;
  //Set the sorting direction to ascending:
  dir = &quot;desc&quot;; 
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i &lt; (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].getElementsByTagName(&quot;TD&quot;)[n];
      y = rows[i + 1].getElementsByTagName(&quot;TD&quot;)[n];
      /*check if the two rows should switch place,
      based on the direction, asc or desc:*/
      if (dir == &quot;asc&quot;) {
        if (Number(x.innerHTML.replace(/,/g, '').replace(/\$/g, '')) &gt; Number(y.innerHTML.replace(/,/g, '').replace(/\$/g, ''))) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      } else if (dir == &quot;desc&quot;) {
        if (Number(x.innerHTML.replace(/,/g, '').replace(/\$/g, '')) &lt; Number(y.innerHTML.replace(/,/g, '').replace(/\$/g, ''))) {
          //if so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      //Each time a switch is done, increase this count by 1:
      switchcount ++;      
    } else {
      /*If no switching has been done AND the direction is &quot;asc&quot;,
      set the direction to &quot;desc&quot; and run the while loop again.*/
      if (switchcount == 0 &amp;&amp; dir == &quot;desc&quot;) {
        dir = &quot;asc&quot;;
        switching = true;
      }
    }
  }
}
&lt;/script&gt;

&lt;p&gt;A few questions naturally follow: How much does the &lt;a href=&quot;https://books.google.com/ngrams&quot;&gt;language of each president’s era&lt;/a&gt; increase/decrease their informational entropy? What about the relative frequencies of two-word combinations? Can we categorize the major themes of each president using &lt;a href=&quot;https://www.analyticsvidhya.com/blog/2018/04/a-comprehensive-guide-to-understand-and-implement-text-classification-in-python/&quot;&gt;text classification?&lt;/a&gt; These are all ideas that are in the works and will come soon in a sequel to this post. As we have seen in recent weeks, words absolutely matter, especially those coming from a President of the United States. They can &lt;a href=&quot;https://www.youtube.com/watch?v=ueMNqdB1QIE&quot;&gt;lift the hopes&lt;/a&gt; or &lt;a href=&quot;https://www.washingtonpost.com/&quot;&gt;stoke the fears&lt;/a&gt; of the citizens who hear them. We should all keep track of them in any way we can.&lt;/p&gt;

&lt;h6&gt;All statistics presented here are based on documents curated by the &lt;a href=&quot;https://www.presidency.ucsb.edu/&quot;&gt;American Presidency Project of UC Santa Barbara&lt;/a&gt;. &lt;a href=&quot;https://github.com/tefirman/PresidentialVocab_App&quot;&gt;Detailed datasets and the python code&lt;/a&gt; used to generate them are available on &lt;a href=&quot;https://github.com/tefirman&quot;&gt;my GitHub page&lt;/a&gt;.




&lt;/h6&gt;</content><summary type="html">As we have found out in recent weeks, words absolutely matter, especially coming from a President of the United States...</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/images/PresidentDictionary.jpg" /></entry><entry><title type="html">Centennial StatePolitical Geography</title><link href="/blog/PoliticalGeographyCO/" rel="alternate" type="text/html" title="Centennial State&lt;br&gt;Political Geography" /><published>2019-07-18T00:00:00-07:00</published><updated>2019-07-18T00:00:00-07:00</updated><id>/blog/PoliticalGeographyCO</id><content type="html" xml:base="/blog/PoliticalGeographyCO/">&lt;head&gt;
&lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot; /&gt;
&lt;meta name=&quot;twitter:creator&quot; content=&quot;@tefirman51&quot; /&gt;
&lt;meta name=&quot;twitter:site&quot; content=&quot;@tefirman51&quot; /&gt;
&lt;meta name=&quot;twitter:title&quot; content=&quot;Centennial State Political Geography&quot; /&gt;
&lt;meta name=&quot;twitter:description&quot; content=&quot;Let's take a comprehensive look at the divergent political geography of Colorado and its effect on the 2020 Senate race...&quot; /&gt;
&lt;meta name=&quot;twitter:image:src&quot; content=&quot;https://tefirman.github.io/images/CO_Maps_Wide.png&quot; /&gt;
&lt;meta name=&quot;twitter:image:width&quot; content=&quot;280&quot; /&gt;
&lt;meta name=&quot;twitter:image:height&quot; content=&quot;150&quot; /&gt;

&lt;script src=&quot;/assets/js/jquery.min.js&quot;&gt;&lt;/script&gt; 
&lt;script&gt; 
$(function(){
  $(&quot;#includedContent&quot;).load(&quot;/images/PrecinctPartisanLeanCO.html&quot;); 
});
&lt;/script&gt;
&lt;script&gt; 
$(function(){
  $(&quot;#includedContent2&quot;).load(&quot;/images/PrecinctTrumpEffectCO.html&quot;); 
});
&lt;/script&gt;
&lt;script&gt; 
$(function(){
  $(&quot;#includedContent3&quot;).load(&quot;/images/FlippablePrecinctsCO.html&quot;); 
});
&lt;/script&gt; 
&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;
&lt;script async=&quot;&quot; src=&quot;https://www.googletagmanager.com/gtag/js?id=UA-141691742-13&quot;&gt;&lt;/script&gt;
&lt;script&gt;
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-141691742-13');
&lt;/script&gt;
&lt;/head&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML&quot; async=&quot;&quot;&gt;&lt;/script&gt;

&lt;p&gt;Colorado has been &lt;a href=&quot;https://en.wikipedia.org/wiki/Politics_of_Colorado&quot;&gt;considered purple since the 90’s&lt;/a&gt;, but has been &lt;a href=&quot;https://www.5280.com/2018/11/colorado-is-still-a-very-purple-state-at-least-for-now/&quot;&gt;steadily turning blue in recent years&lt;/a&gt;. So why is the &lt;a href=&quot;https://fivethirtyeight.com/features/its-early-but-colorados-cory-gardner-has-a-tough-road-to-re-election-in-2020/&quot;&gt;upcoming Senate race&lt;/a&gt; between incumbent Republican Senator Cory Gardner and his hypothetical Democratic opponent still something the citizenry should pay attention to? For starters, the Senate is an unfair playing field, so we should care about every race. The way Senators are apportioned provides &lt;a href=&quot;https://tefirman.github.io/blog/UnequalRepresentation/&quot;&gt;disproportionate power to citizens of certain states&lt;/a&gt;, even more so than the electoral college, so every seat is important. But perhaps a more interesting reason is that the divergent political geography of the Centennial State makes the potential outcome of this race much foggier. In order to illustrate this, I set out to map the behavior of political partisanship throughout the state of Colorado.&lt;/p&gt;

&lt;p&gt;Mapping partisanship by county is actually pretty simple considering that county outlines are readily available from the US Census Bureau. However, different parts of the county take part in different races. For instance, Douglas County votes in both the 4th and 6th congressional districts. Grouping these voters into one statistic would create an apples to oranges comparison in that the 58,000 DougCo voters that voted in the 6th congressional district faced a different choice than the 117,000 that voted in the 4th congressional district. Furthermore, counties can be rather large (Douglas County is 840 mi&lt;sup&gt;2&lt;/sup&gt;) so the partisan characteristics of one end of the county could be very different from the other.&lt;/p&gt;

&lt;p&gt;On the other hand, individual voting precincts are much smaller in area and all voters in each precinct vote in the same races, providing a fair comparison across the board. However, the actual mapping of these results is rather difficult for multiple reasons. Precincts are drawn by each respective county, so you have to go to each of the 64 county clerk offices to find the outlines of the precincts they preside over. In the easiest cases, GIS shapefiles are readily available for download on their website. In the more difficult cases, hand drawn maps need to be manually converted to shapefiles using &lt;a href=&quot;https://automeris.io/WebPlotDigitizer/&quot;&gt;WebPlotDigitizer&lt;/a&gt; and multiple Python modules. In the worst cases, the county clerk doesn’t have an email address and won’t return your phone calls. As a result, I wouldn’t recommend using the following maps in any sort of official capacity to identify which precinct you vote in, but I do think these maps are pretty unique and comprehensive.&lt;/p&gt;

&lt;p&gt;To define the scope of the analysis shown here, let’s consider results from presidential and midterm elections in the state of Colorado between 2012 and 2018. As a disclaimer, the metrics I’ll be using are similar (if not identical) to &lt;a href=&quot;https://fivethirtyeight.com/features/election-update-the-house-districts-that-swing-the-most-and-least-with-the-national-mood/&quot;&gt;those used by analysts at FiveThirtyEight&lt;/a&gt;. There’s no way I’m smart enough to have invented these metrics, just smart enough to know how to apply them. Starting with the basics, &lt;b&gt;partisan lean&lt;/b&gt; is a &lt;a href=&quot;https://fivethirtyeight.com/features/everything-is-partisan-and-correlated-and-boring/&quot;&gt;fairly standard&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Cook_Partisan_Voting_Index&quot;&gt;metric&lt;/a&gt; of whether an area is more Republican or Democratic, but we will define it explicitly as&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;L_i = \frac{1}{N_i} \sum_{j=1}^{N_i} (D_{i,j} - R_{i,j}).&lt;/script&gt;

&lt;p&gt;where &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt; is the precinct index, &lt;script type=&quot;math/tex&quot;&gt;N_{i}&lt;/script&gt; is the number of races in the precinct, &lt;script type=&quot;math/tex&quot;&gt;j&lt;/script&gt; is the election index (e.g. 2018 District 3 State House race, 2014 Senate race, etc.), and &lt;script type=&quot;math/tex&quot;&gt;D_{i,j}&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;R_{i,j}&lt;/script&gt; are the percentage of Democratic and Republican votes, respectively, for race &lt;script type=&quot;math/tex&quot;&gt;j&lt;/script&gt; in precinct &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt;. The map below illustrates this metric for each precinct throughout the state in the form of a heat map with darker shades of red representing more Republican areas and darker shades of blue representing more Democratic areas. The general trends are not surprising in that more densely populated areas (e.g. Denver, Boulder, Fort Collins) tend to be more Democratic and more sparse rural areas (e.g. the entire eastern third of the state) tend to be more Republican, but seeing where the exact lines are drawn is both interesting and informative.&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;div id=&quot;includedContent&quot;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;However, these partisan predilections do not remain static over time. Precinct leans can easily change based on both the impact of current events and the changing makeup of voting populations. For instance, the 2018 midterms in Colorado saw an 8.1% increase in voter turnout compared to 2014. Numerous things changed in those four years, but the most obvious and earth-shattering one in terms of politics was the election of our current president. To illustrate its effect on voters’ behaviors, we’ll use what I’m calling the &lt;b&gt;Trump effect&lt;/b&gt;: it calculates the lean of a precinct using only races from the 2018 midterms and subtracts the lean of the same precinct using only the 2014 midterms. This isolates where voters are trending due to the instability and antics of the current resident of the White House. As you can see in the map below, the sea of cerulean is not good news for Cory Gardner, especially considering &lt;a href=&quot;https://projects.fivethirtyeight.com/congress-trump-score/cory-gardner/&quot;&gt;he votes in line with Trump 90% of the time.&lt;/a&gt;&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;div id=&quot;includedContent2&quot;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Another interesting and lesser-known metric is &lt;b&gt;partisan elasticity&lt;/b&gt;, &lt;a href=&quot;https://fivethirtyeight.com/features/election-update-the-house-districts-that-swing-the-most-and-least-with-the-national-mood/&quot;&gt;an index of how stubborn voters are with their partisanship&lt;/a&gt;, i.e. are they voting party lines down the ballot or will they vote for the other party if the right candidate comes along. This will be defined as the standard deviation of the partisan lean, or using the same variables from the first equation,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;E_i = \sqrt{\frac{1}{N_i} \sum_{j=1}^{N_i} (D_{i,j} - R_{i,j})^2 - L_i^2}.&lt;/script&gt;

&lt;p&gt;&lt;a href=&quot;/images/PrecinctPartisanElasticityCO.html&quot;&gt;In isolation&lt;/a&gt;, the relevance of a precinct’s elasticity is kind of hard to grasp, but when put in context with its associated lean, elasticity teases out valuable insight for potential candidates. Let’s say a campaign wanted to identify areas where a candidate’s effort would have the most impact. To do this, we can look at “flippable” precincts, precincts that have elasticities larger than the magnitude of their lean. To get the most bang for our buck, let’s also limit the scope to precincts with voter densities higher than 100 per square mile.&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;div id=&quot;includedContent3&quot;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Fascinatingly, the map above shows us that the majority of these flippable precincts are in the suburban neighborhoods surrounding the major cities along the Front Range. Keep in mind that winning over precincts is not the goal in a Senate race, winning over voters is, so this metric of flippability should not be the golden standard. In order to get past the primary, a Democrat needs to visit the major cities since that’s where the majority of Democrats reside. Even in the general, a smaller elasticity could still swing more votes overall &lt;a href=&quot;/images/PrecinctVoterDensityCO.html&quot;&gt;if the precinct is dense enough&lt;/a&gt;. However, these suburban conditions provide a great opportunity for a candidate to knock on doors, shake a few hands, and have the fabled “kitchen table discussions” with everyday voters. Gaining Democratic support in these neighborhoods would kill two birds with one stone: they vote for you in the primary and persuade their undecided neighbors during the general.&lt;/p&gt;

&lt;p&gt;So which candidates might we be seeing in these flippable precincts come March? And which of them should we be paying attention to? If online presence has anything to do with it, &lt;a href=&quot;https://www.mikejohnstonforcolorado.com/&quot;&gt;former State Senator Mike Johnston&lt;/a&gt; should be at the top of the list. Of the declared candidates, Johnston has the highest relative search interest via &lt;a href=&quot;https://trends.google.com/trends/?geo=US&quot;&gt;Google Trends&lt;/a&gt; over the past two years, the most &lt;a href=&quot;https://www.facebook.com/MikeJohnstonCO/&quot;&gt;Facebook likes&lt;/a&gt;, and the third most &lt;a href=&quot;https://twitter.com/MikeJohnstonCO&quot;&gt;Twitter followers&lt;/a&gt; as of June 23, 2019 (see table below). And since &lt;a href=&quot;https://www.denverpost.com/2019/04/02/mike-johnston-fundraising-senate-cory-gardner/&quot;&gt;money&lt;/a&gt; definitely has something to do with primaries, it should be mentioned that Johnston has &lt;a href=&quot;https://www.fec.gov/data/elections/senate/CO/2020/&quot;&gt;twice the fundraising&lt;/a&gt; as the rest of the field combined. Honestly, he should be more worried about individuals who have yet to join the race, e.g. if Hickenlooper decides to stop the exercise in narcissism that is his presidential campaign, or if Perlmutter decides it’s time to upgrade from the House of Representatives.&lt;/p&gt;

&lt;style&gt;
table {
    border-spacing: 0;
    width: 100%;
    border: 1px solid #ddd;
    line-height: 1
}

th {
    cursor: pointer;
}

th, td {
    text-align: left;
    padding: 0px;
    vertical-align: middle;
    min-height: 1px;
    border-left: 1px solid #ddd;
    border-right: 1px solid #ddd;
}

tr:nth-child(even) {
    background-color: #f2f2f2
}
&lt;/style&gt;

&lt;h3&gt;Online Presence and Fundraising of Declared Democratic Senate Candidates&lt;/h3&gt;
&lt;table id=&quot;myTable&quot;&gt;
  &lt;tr height=&quot;50&quot;&gt;
    &lt;th onclick=&quot;sortTable(0)&quot;&gt;Candidate&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber(1)&quot;&gt;Relative Search Interest&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber(2)&quot;&gt;Twitter Followers&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber(3)&quot;&gt;Facebook Likes&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber(4)&quot;&gt;Fundraising&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
  &lt;td&gt;Mike Johnston&lt;/td&gt;
    &lt;td&gt;369&lt;/td&gt;
    &lt;td&gt;14,610&lt;/td&gt;
    &lt;td&gt;14,789&lt;/td&gt;
    &lt;td&gt;$1,804,923.52&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
  &lt;td&gt;Andrew Romanoff&lt;/td&gt;
    &lt;td&gt;76&lt;/td&gt;
    &lt;td&gt;4,509&lt;/td&gt;
    &lt;td&gt;7,800&lt;/td&gt;
    &lt;td&gt;$504,095.35&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
  &lt;td&gt;Diana Bray&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
    &lt;td&gt;195&lt;/td&gt;
    &lt;td&gt;527&lt;/td&gt;
    &lt;td&gt;$72,514.38&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
  &lt;td&gt;Trish Zornio&lt;/td&gt;
    &lt;td&gt;19&lt;/td&gt;
    &lt;td&gt;72,487&lt;/td&gt;
    &lt;td&gt;2,983&lt;/td&gt;
    &lt;td&gt;$59,048.41&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
  &lt;td&gt;Lorena Garcia&lt;/td&gt;
    &lt;td&gt;53&lt;/td&gt;
    &lt;td&gt;808&lt;/td&gt;
    &lt;td&gt;1,941&lt;/td&gt;
    &lt;td&gt;$14,266.15&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
  &lt;td&gt;Dustin Leitzel&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
    &lt;td&gt;420&lt;/td&gt;
    &lt;td&gt;415&lt;/td&gt;
    &lt;td&gt;$5,603.00&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
  &lt;td&gt;John Walsh&lt;/td&gt;
    &lt;td&gt;181&lt;/td&gt;
    &lt;td&gt;7,263&lt;/td&gt;
    &lt;td&gt;2,301&lt;/td&gt;
    &lt;td&gt;$0.00&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
  &lt;td&gt;Stephany Rose Spaulding&lt;/td&gt;
    &lt;td&gt;66&lt;/td&gt;
    &lt;td&gt;3,225&lt;/td&gt;
    &lt;td&gt;3,228&lt;/td&gt;
    &lt;td&gt;$0.00&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
  &lt;td&gt;Dan Baer&lt;/td&gt;
    &lt;td&gt;29&lt;/td&gt;
    &lt;td&gt;15,353&lt;/td&gt;
    &lt;td&gt;5,490&lt;/td&gt;
    &lt;td&gt;$0.00&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
  &lt;td&gt;Alice Madden&lt;/td&gt;
    &lt;td&gt;10&lt;/td&gt;
    &lt;td&gt;1,021&lt;/td&gt;
    &lt;td&gt;766&lt;/td&gt;
    &lt;td&gt;$0.00&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
  &lt;td&gt;Ellen Burnes&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
    &lt;td&gt;62&lt;/td&gt;
    &lt;td&gt;128&lt;/td&gt;
    &lt;td&gt;$0.00&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;script&gt;
function sortTable(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById(&quot;myTable&quot;);
  switching = true;
  //Set the sorting direction to ascending:
  dir = &quot;desc&quot;; 
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i &lt; (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].getElementsByTagName(&quot;TD&quot;)[n];
      y = rows[i + 1].getElementsByTagName(&quot;TD&quot;)[n];
      /*check if the two rows should switch place,
      based on the direction, asc or desc:*/
      if (dir == &quot;asc&quot;) {
        if (x.innerHTML.toLowerCase() &gt; y.innerHTML.toLowerCase()) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      } else if (dir == &quot;desc&quot;) {
        if (x.innerHTML.toLowerCase() &lt; y.innerHTML.toLowerCase()) {
          //if so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      //Each time a switch is done, increase this count by 1:
      switchcount ++;      
    } else {
      /*If no switching has been done AND the direction is &quot;asc&quot;,
      set the direction to &quot;desc&quot; and run the while loop again.*/
      if (switchcount == 0 &amp;&amp; dir == &quot;desc&quot;) {
        dir = &quot;asc&quot;;
        switching = true;
      }
    }
  }
}

function sortTableNumber(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById(&quot;myTable&quot;);
  switching = true;
  //Set the sorting direction to ascending:
  dir = &quot;desc&quot;; 
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i &lt; (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].getElementsByTagName(&quot;TD&quot;)[n];
      y = rows[i + 1].getElementsByTagName(&quot;TD&quot;)[n];
      /*check if the two rows should switch place,
      based on the direction, asc or desc:*/
      if (dir == &quot;asc&quot;) {
        if (Number(x.innerHTML.replace(/,/g, '').replace(/\$/g, '')) &gt; Number(y.innerHTML.replace(/,/g, '').replace(/\$/g, ''))) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      } else if (dir == &quot;desc&quot;) {
        if (Number(x.innerHTML.replace(/,/g, '').replace(/\$/g, '')) &lt; Number(y.innerHTML.replace(/,/g, '').replace(/\$/g, ''))) {
          //if so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      //Each time a switch is done, increase this count by 1:
      switchcount ++;      
    } else {
      /*If no switching has been done AND the direction is &quot;asc&quot;,
      set the direction to &quot;desc&quot; and run the while loop again.*/
      if (switchcount == 0 &amp;&amp; dir == &quot;desc&quot;) {
        dir = &quot;asc&quot;;
        switching = true;
      }
    }
  }
}
&lt;/script&gt;

&lt;p&gt;All of these factors aside, I do think Mike Johnston would make an excellent Senator for Colorado. &lt;a href=&quot;https://www.youtube.com/watch?v=xlyBfInS7ec&quot;&gt;To paraphrase the wise (albeit fictional) Sam Seaborn&lt;/a&gt;, education is the silver bullet and &lt;a href=&quot;https://www.chalkbeat.org/posts/co/2010/05/12/effectiveness-bill-advances-in-house/&quot;&gt;Johnston’s record&lt;/a&gt; &lt;a href=&quot;https://www.denverpost.com/2013/04/29/colorado-governor-signs-bill-for-illegal-immigrants-in-state-tuition/&quot;&gt;in that department&lt;/a&gt; is &lt;a href=&quot;https://www.westword.com/news/colorado-gubernatorial-candidate-mike-johnston-is-trying-to-build-bridges-in-bridge-burning-times-10459600&quot;&gt;second to none&lt;/a&gt;. I will note that he may want to tread lightly on that subject considering the &lt;a href=&quot;https://www.cpr.org/2018/11/07/colorado-amendment-73-tax-increase-for-public-education-has-failed/&quot;&gt;recent results of Colorado Amendment 73&lt;/a&gt;, which would have increased public education funding via higher income, corporate, and property taxes. In the flippable precincts mentioned above, &lt;a href=&quot;/images/PrecinctAmendment73YesPctCO.html&quot;&gt;only 44.2% of voters&lt;/a&gt; voted in favor of the amendment. I’m not saying don’t tout your education credentials, just don’t rely entirely on that issue, especially if it’s paired with a tax increase.&lt;/p&gt;

&lt;p&gt;Regardless of who ends up being the Democratic nominee, Cory Gardner &lt;a href=&quot;https://www.denverpost.com/2019/03/14/cory-gardner-endorsement-mistake/&quot;&gt;has not acted with Coloradoans’ best interests in mind&lt;/a&gt;, &lt;a href=&quot;https://www.washingtonpost.com/powerpost/thats-the-model-cory-gardner-stands-up-to-president-trump/2018/01/05/b3b9b2b6-f17b-11e7-b3bf-ab90a706e175_story.html?utm_term=.50900054ae3f&quot;&gt;despite his best efforts as of late&lt;/a&gt;. Senator Gardner has voted &lt;a href=&quot;https://www.denverpost.com/2017/07/29/cory-gardner-health-care-obamacare-repeal-vote/&quot;&gt;to repeal health coverage for over 400,000 Coloradoans&lt;/a&gt;, &lt;a href=&quot;https://www.denverpost.com/2019/03/14/cory-gardner-trump-border-wall-immigration/&quot;&gt;uphold President Trump’s wasteful and xenophobic border wall&lt;/a&gt;, &lt;a href=&quot;http://www.cpr.org/2016/06/21/4-gun-control-measures-fail-how-colorados-senators-voted/&quot;&gt;oppose common-sense gun laws&lt;/a&gt;, and &lt;a href=&quot;https://itep.org/trumpgopplanco/&quot;&gt;provide 60% of the state’s tax cuts to the richest 1% of its citizens&lt;/a&gt;. A change needs to be made, and if the Democratic candidate can deftly navigate the unique political geography of Colorado, this historically purple state may just turn blue.&lt;/p&gt;

&lt;h6&gt;All statistics presented in the maps shown here were calculated using &lt;a href=&quot;https://www.sos.state.co.us/pubs/elections/resultsData.html&quot;&gt;official election results from the Colorado Secretary of State website&lt;/a&gt;. All precinct shapes were collected from each county's Clerk and Recorder. The &lt;a href=&quot;https://github.com/tefirman/StatisticalStumbles/tree/master/ElectionResults_CO&quot;&gt;relevant data&lt;/a&gt; and &lt;a href=&quot;https://github.com/tefirman/StatisticalStumbles/blob/master/ElectionResults_CO.py&quot;&gt;python code&lt;/a&gt; used to calculate them are available on &lt;a href=&quot;https://github.com/tefirman&quot;&gt;my GitHub page&lt;/a&gt; and precinct shapefiles are available on request.


&lt;/h6&gt;</content><summary type="html">Let's take a comprehensive look at the divergent political geography of Colorado and its effect on the 2020 Senate race...</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/images/CO_Maps_Wide.png" /></entry><entry><title type="html">Methods to the Madness</title><link href="/blog/MarchMadness/" rel="alternate" type="text/html" title="Methods to the Madness" /><published>2019-05-27T00:00:00-07:00</published><updated>2019-05-27T00:00:00-07:00</updated><id>/blog/MarchMadness</id><content type="html" xml:base="/blog/MarchMadness/">&lt;head&gt;
&lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot; /&gt;
&lt;meta name=&quot;twitter:creator&quot; content=&quot;@tefirman51&quot; /&gt;
&lt;meta name=&quot;twitter:site&quot; content=&quot;@tefirman51&quot; /&gt;
&lt;meta name=&quot;twitter:title&quot; content=&quot;Methods to the Madness&quot; /&gt;
&lt;meta name=&quot;twitter:description&quot; content=&quot;Because brackets are hard and chalk is for the faint of heart...&quot; /&gt;
&lt;meta name=&quot;twitter:image:src&quot; content=&quot;https://tefirman.github.io/images/CoinBracket.png&quot; /&gt;
&lt;meta name=&quot;twitter:image:width&quot; content=&quot;280&quot; /&gt;
&lt;meta name=&quot;twitter:image:height&quot; content=&quot;150&quot; /&gt;
&lt;script src=&quot;/assets/js/jquery.min.js&quot;&gt;&lt;/script&gt; 
&lt;script&gt; 
$(function(){
  $(&quot;#includedContent&quot;).load(&quot;/images/MarchMadness_PointDistribution.html&quot;); 
});
&lt;/script&gt;
&lt;script&gt; 
$(function(){
  $(&quot;#includedContent2&quot;).load(&quot;/images/MarchMadness_RelativePoints.html&quot;); 
});
&lt;/script&gt; 
&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;
&lt;script async=&quot;&quot; src=&quot;https://www.googletagmanager.com/gtag/js?id=UA-141691742-3&quot;&gt;&lt;/script&gt;
&lt;script&gt;
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-141691742-3');
&lt;/script&gt;
&lt;/head&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML&quot; async=&quot;&quot;&gt;&lt;/script&gt;

&lt;p&gt;March Madness has come and gone and it was an exciting (albeit fairly chalk-ish) tournament! To get a little skin in the game, many people join &lt;a href=&quot;http://fantasy.espn.com/tournament-challenge-bracket/2019/en/story?pageName=tcmen%5Crules&quot;&gt;bracket leagues&lt;/a&gt; where they pick a winner for each of the sixty-three match-ups in the bracket. A correct pick is worth 10 points in the round of 64, 20 in the round of 32, 40 in the Sweet Sixteen, 80 in the Elite Eight, 160 points in the Final Four, and 320 points in the championship. At the end of the tournament, the bracket with the most points wins. This year would have been my first victory, were it not for the non-existent three-pointer foul by Samir Doughty (thanks for nothing, Wahoos), so I decided to look into the different methodologies of bracket selection to hopefully improve my odds for next year. There are some &lt;a href=&quot;https://bleacherreport.com/articles/1573533-10-fun-ways-to-pick-a-march-madness-bracket#slide0&quot;&gt;pretty strange techniques&lt;/a&gt; out there (my personal favorite is which mascot would win in a fight), but the most logical one I could come up with uses the projections from our friends over at &lt;a href=&quot;https://fivethirtyeight.com&quot;&gt;FiveThirtyEight&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;Let’s say you have no previous experience with college basketball, but you still want to play in order to have something to talk about with coworkers/old high school buddies/random strangers. To get around your lack of experience, you decide to flip a coin to pick who wins each matchup, i.e. heads means the better seed wins, tails means the worse seed wins. However, to make sure you don’t pick a 16-seed going all the way to the Final Four, you decide to use the latest innovation in sports-related coinage: a self-biasing coin whose heads/tails probabilities shift based on the &lt;a href=&quot;https://projects.fivethirtyeight.com/march-madness-api/2019/fivethirtyeight_ncaa_forecasts.csv&quot;&gt;two teams in each matchup&lt;/a&gt; and &lt;a href=&quot;https://fivethirtyeight.com/features/how-our-march-madness-predictions-work-2/&quot;&gt;FiveThirtyEight’s Elo ratings system. For simplicity’s sake, let’s ignore FiveThirtyEight’s travel and injury adjustments (partly because they seem to be shrouded in secrecy) as well as the four initial play-in games (because those games are pointless). Let’s also assume we only know the initial team ratings. So as an example, in the first round Gonzaga-FDU matchup (Go Zags), Gonzaga has a rating of 95.02 and Fairleigh Dickinson has a rating of 70.04. This would suggest that the probability of the coin coming up heads (and Gonzaga winning) would be&lt;/a&gt;&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P_{H} = \frac{1}{1 + 10^{30.464*(70.04 - 95.02)/400}} = 98.8\%&lt;/script&gt;

&lt;p&gt;and the probability of the coin coming up tails (and FDU winning) would be&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P_{T} = \frac{1}{1 + 10^{30.464*(95.02 - 70.04)/400}} = 1.2\%.&lt;/script&gt;

&lt;p&gt;For both the men’s and women’s tournaments, how much better does the specially designed self-biasing coin do compared to a plain old unbiased quarter? What about compared to “chalk” where the better seed always wins? To assess how this method would perform, we can apply it to the past three tournaments using a &lt;a href=&quot;https://en.wikipedia.org/wiki/Monte_Carlo_method&quot;&gt;Monte Carlo simulation&lt;/a&gt;. Using the code located &lt;a href=&quot;https://github.com/tefirman/StatisticalStumbles/blob/master/MarchMadnessSim.py&quot;&gt;here&lt;/a&gt;, we can pick &lt;a href=&quot;https://github.com/tefirman/StatisticalStumbles/tree/master/MarchMadnessSims&quot;&gt;10,000 brackets for each year&lt;/a&gt; and see what the distributions of point values look like for each year compared to chalk or an unbiased coin flip, distributions like the ones below!&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;div id=&quot;includedContent&quot;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;style&gt;
table {
    border-spacing: 0;
    width: 100%;
    border: 1px solid #ddd;
    line-height: 1
}

th {
    cursor: pointer;
}

th, td {
    text-align: left;
    padding: 0px;
    vertical-align: middle;
    min-height: 1px;
    border-left: 1px solid #ddd;
    border-right: 1px solid #ddd;
}

tr:nth-child(even) {
    background-color: #f2f2f2
}
&lt;/style&gt;

&lt;h3&gt;March Madness Results - Chalk vs. Biased Coin&lt;/h3&gt;
&lt;table id=&quot;myTable&quot;&gt;
  &lt;tr height=&quot;50&quot;&gt;
    &lt;th onclick=&quot;sortTable(0)&quot;&gt;Season&lt;/th&gt;
    &lt;th onclick=&quot;sortTable(1)&quot;&gt;Gender&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber(2)&quot;&gt;Chalk&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber(3)&quot;&gt;Simulation Avg.&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber(4)&quot;&gt;Simulation St. Dev.&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Unbiased Coin&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;314.9&lt;/td&gt;
    &lt;td&gt;134.7&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;2017&lt;/td&gt;
    &lt;td&gt;Men&lt;/td&gt;
    &lt;td&gt;820&lt;/td&gt;
    &lt;td&gt;680.4&lt;/td&gt;
    &lt;td&gt;221.7&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;2017&lt;/td&gt;
    &lt;td&gt;Women&lt;/td&gt;
    &lt;td&gt;940&lt;/td&gt;
    &lt;td&gt;930.4&lt;/td&gt;
    &lt;td&gt;176.5&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;2018&lt;/td&gt;
    &lt;td&gt;Men&lt;/td&gt;
    &lt;td&gt;810&lt;/td&gt;
    &lt;td&gt;662.7&lt;/td&gt;
    &lt;td&gt;261.4&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;2018&lt;/td&gt;
    &lt;td&gt;Women&lt;/td&gt;
    &lt;td&gt;1190&lt;/td&gt;
    &lt;td&gt;924.7&lt;/td&gt;
    &lt;td&gt;174.4&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;2019&lt;/td&gt;
    &lt;td&gt;Men&lt;/td&gt;
    &lt;td&gt;920&lt;/td&gt;
    &lt;td&gt;802.8&lt;/td&gt;
    &lt;td&gt;248.9&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;2019&lt;/td&gt;
    &lt;td&gt;Women&lt;/td&gt;
    &lt;td&gt;1470&lt;/td&gt;
    &lt;td&gt;1218.3&lt;/td&gt;
    &lt;td&gt;252.6&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;script&gt;
function sortTable(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById(&quot;myTable&quot;);
  switching = true;
  //Set the sorting direction to ascending:
  dir = &quot;desc&quot;; 
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i &lt; (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].getElementsByTagName(&quot;TD&quot;)[n];
      y = rows[i + 1].getElementsByTagName(&quot;TD&quot;)[n];
      /*check if the two rows should switch place,
      based on the direction, asc or desc:*/
      if (dir == &quot;asc&quot;) {
        if (x.innerHTML.toLowerCase() &gt; y.innerHTML.toLowerCase()) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      } else if (dir == &quot;desc&quot;) {
        if (x.innerHTML.toLowerCase() &lt; y.innerHTML.toLowerCase()) {
          //if so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      //Each time a switch is done, increase this count by 1:
      switchcount ++;      
    } else {
      /*If no switching has been done AND the direction is &quot;asc&quot;,
      set the direction to &quot;desc&quot; and run the while loop again.*/
      if (switchcount == 0 &amp;&amp; dir == &quot;desc&quot;) {
        dir = &quot;asc&quot;;
        switching = true;
      }
    }
  }
}

function sortTableNumber(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById(&quot;myTable&quot;);
  switching = true;
  //Set the sorting direction to ascending:
  dir = &quot;desc&quot;; 
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i &lt; (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].getElementsByTagName(&quot;TD&quot;)[n];
      y = rows[i + 1].getElementsByTagName(&quot;TD&quot;)[n];
      /*check if the two rows should switch place,
      based on the direction, asc or desc:*/
      if (dir == &quot;asc&quot;) {
        if (Number(x.innerHTML) &gt; Number(y.innerHTML)) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      } else if (dir == &quot;desc&quot;) {
        if (Number(x.innerHTML) &lt; Number(y.innerHTML)) {
          //if so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      //Each time a switch is done, increase this count by 1:
      switchcount ++;      
    } else {
      /*If no switching has been done AND the direction is &quot;asc&quot;,
      set the direction to &quot;desc&quot; and run the while loop again.*/
      if (switchcount == 0 &amp;&amp; dir == &quot;desc&quot;) {
        dir = &quot;asc&quot;;
        switching = true;
      }
    }
  }
}
&lt;/script&gt;

&lt;p&gt;As you may have already guessed, the unbiased coin flip (blue traces) does not do well at all, producing far fewer points than our technically advanced currency regardless of the season. Even when we compare the biased coin results (solid lines) to chalk results (dashed lines), we can see that, on average, the sophisticated FiveThirtyEight method comes close but also falls short of a chalk bracket. However, where the benefit of this method can be seen is in the width of these distributions. If we normalize the three biased coin distributions relative to the chalk point values for the respective years and average them together, this produces the graph below. Again, for both the men’s and women’s tournaments, the average ratio is below one, but 24.7% of the men’s brackets and 21.8% of the women’s brackets earn more points than a chalk bracket. Picking chalk may give you more points on average, but if you want to win in a bracket league of ten people, you have to take risks.&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;div id=&quot;includedContent2&quot;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The real test would be to compare this method’s results to the actual brackets that fanatical sports enthusiasts submit, but I’ll leave that for next year’s analysis. Hopefully this method helps all of us in next year’s basketball-related spring psychosis!&lt;/p&gt;

&lt;h6&gt;The &lt;a href=&quot;https://github.com/tefirman/StatisticalStumbles/blob/master/MarchMadnessSim.py&quot;&gt;python code&lt;/a&gt; and &lt;a href=&quot;https://github.com/tefirman/StatisticalStumbles/tree/master/MarchMadnessSims&quot;&gt;simulations&lt;/a&gt; used to generate the values and figures above are available on &lt;a href=&quot;https://github.com/tefirman&quot;&gt;my GitHub page&lt;/a&gt;.

&lt;/h6&gt;</content><summary type="html">Because brackets are hard and chalk is for the faint of heart...</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/images/CoinBracket.png" /></entry><entry><title type="html">Riddler Submission: ¡Lotería!</title><link href="/blog/Loteria/" rel="alternate" type="text/html" title="Riddler Submission: ¡Loter&amp;iacute;a!" /><published>2019-05-25T00:00:00-07:00</published><updated>2019-05-25T00:00:00-07:00</updated><id>/blog/Loteria</id><content type="html" xml:base="/blog/Loteria/">&lt;head&gt;
&lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot; /&gt;
&lt;meta name=&quot;twitter:creator&quot; content=&quot;@tefirman51&quot; /&gt;
&lt;meta name=&quot;twitter:site&quot; content=&quot;@tefirman51&quot; /&gt;
&lt;meta name=&quot;twitter:title&quot; content=&quot;Riddler Submission: ¡Loter&amp;iacute;a!&quot; /&gt;
&lt;meta name=&quot;twitter:description&quot; content=&quot;Learn Spanish and gamble all at the same time!!!&quot; /&gt;
&lt;meta name=&quot;twitter:image:src&quot; content=&quot;https://tefirman.github.io/images/Loteria.png&quot; /&gt;
&lt;meta name=&quot;twitter:image:width&quot; content=&quot;280&quot; /&gt;
&lt;meta name=&quot;twitter:image:height&quot; content=&quot;150&quot; /&gt;
&lt;script src=&quot;/assets/js/jquery.min.js&quot;&gt;&lt;/script&gt; 
&lt;script&gt; 
$(function(){
  $(&quot;#includedContent&quot;).load(&quot;/images/Loteria_ZeroMatches.html&quot;); 
});
&lt;/script&gt;
&lt;script&gt; 
$(function(){
  $(&quot;#includedContent2&quot;).load(&quot;/images/Loteria_Slidebar.html&quot;); 
});
&lt;/script&gt; 
&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;
&lt;script async=&quot;&quot; src=&quot;https://www.googletagmanager.com/gtag/js?id=UA-141691742-1&quot;&gt;&lt;/script&gt;
&lt;script&gt;
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-141691742-1');
&lt;/script&gt;
&lt;/head&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML&quot; async=&quot;&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Loter%C3%ADa&quot;&gt;Lotería&lt;/a&gt; is a traditional Mexican game of chance akin to bingo. Each player receives a 4-by-4 grid of images. Instead of the comically large rotating bin of numbered balls, the caller randomly draws a card from a deck containing all 54 possible images. If a player has that image on their grid, they mark off the corresponding location with a corn kernel or pinto bean. Exact rules can vary, but in the version I was taught, the game ends when one of the players fills their entire card (and screams “¡Lotería!”). Each of the 54 possible images can only show up once on each card, but other than that restriction, let’s assume image selection and placement on each player grid is random.&lt;/p&gt;

&lt;p&gt;One beautiful day, you and your friend Christina decide to play a friendly game of Loteria. What is the probability that either of you end the game with an empty grid, i.e. none of your images were called? How does this probability change if there were more/fewer unique images? Larger/smaller player grids?&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;The inspiration for this problem actually comes from reality: while on vacation, a friend of mine ended a game with zero matching images and I seemed to be the only one flabbergasted by the odds. To illustrate that I wasn’t crazy (or perhaps confirm that I was), I set out to calculate the exact odds of such a thing happening. First, the two grids cannot have any overlap. If any of the images on the first card are also on the second, the first card cannot possibly cover all its images without covering one on the second. With &lt;script type=&quot;math/tex&quot;&gt;G = 16&lt;/script&gt; images on each grid and &lt;script type=&quot;math/tex&quot;&gt;D = 54&lt;/script&gt; possible images, there are &lt;script type=&quot;math/tex&quot;&gt;\frac{D!}{G!(D - G)!} = \frac{54!}{16!38!}&lt;/script&gt; possible grids that either player could have. Regardless of which images are on the first player’s grid, the second grid now only has &lt;script type=&quot;math/tex&quot;&gt;D - G = 38&lt;/script&gt; images to choose from, hence leaving &lt;script type=&quot;math/tex&quot;&gt;\frac{(D - G)!}{G!(D - 2G)!} = \frac{38!}{16!22!}&lt;/script&gt; non-overlap grids. Thus, the probability of the two grids having no overlap is&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P_{d} = \frac{(D - G)!}{G!(D - 2G)!} \times \frac{G!(D - G)!}{D!} = \frac{(D - G)!(D - G)!}{(D - 2G)!D!} = \frac{38!38!}{22!54!} = 0.00105428&lt;/script&gt;

&lt;p&gt;Second, we need the order of the deck to be such that all of one player’s images will come up before any of the other player’s images. After &lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt; cards are revealed from the deck, there are &lt;script type=&quot;math/tex&quot;&gt;\frac{D!}{N!(D - N)!} = \frac{54!}{N!(54 - N)!}&lt;/script&gt; possible card combinations that could be revealed and &lt;script type=&quot;math/tex&quot;&gt;N!&lt;/script&gt; possible orderings of those cards, giving us a total of&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;Q = \frac{D!}{N!(D - N)!} \times N! = \frac{D!}{(D - N)!} = \frac{54!}{(54 - N)!}\text{ possible outcomes.}&lt;/script&gt;

&lt;p&gt;How many of the possible outcomes result in the first player getting their sixteenth and final match on the &lt;script type=&quot;math/tex&quot;&gt;N^{\text{th}}&lt;/script&gt; card and the second player getting no matches at all? Out of the &lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt; cards revealed, &lt;script type=&quot;math/tex&quot;&gt;G = 16&lt;/script&gt; of them have to match, but the remaining &lt;script type=&quot;math/tex&quot;&gt;N - G&lt;/script&gt; cards can’t match any image on either grid. This suggests &lt;script type=&quot;math/tex&quot;&gt;\frac{(D - 2G)!}{(N - G)!(D - G - N)!} = \frac{22!}{(N - 16)!(38 - N)!}&lt;/script&gt; possible combinations of non-matching cards to come up. Furthermore, the first &lt;script type=&quot;math/tex&quot;&gt;N - 1&lt;/script&gt; cards can be in any order they want, giving us &lt;script type=&quot;math/tex&quot;&gt;(N - 1)!&lt;/script&gt; possible orderings, but the &lt;script type=&quot;math/tex&quot;&gt;N^{\text{th}}&lt;/script&gt; card has to be one of the G = 16 matching cards, resulting in G possible endings. This produces&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;W = \frac{(D - 2G)!}{(N - G)!(D - G - N)!} \times (N - 1)! \times G = \frac{22!(N - 1)!16}{(N - 16)!(38 - N)!}\text{ possible winning outcomes.}&lt;/script&gt;

&lt;p&gt;With all possible outcomes being equally probable, we can calculate the probability of one player winning and the other remaining at zero after revealing &lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt; cards as&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P_{w}(N) = \frac{W}{Q} = \frac{(D - 2G)!(N - 1)!G}{(N - G)!(D - G - N)!} \times \frac{(D - N)!}{D!} = \frac{22!(N - 1)!16}{(N - 16)!(38 - N)!} \times \frac{(54 - N)!}{54!}.&lt;/script&gt;

&lt;p&gt;Next, let’s put these two probability functions together. Since either player can be the winner or loser, the probability of a game ending with either player having an empty grid after &lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt; turns is&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P_{z}(N) = 2 \times P_{d} \times P_{w}(N) = 2 \times \frac{(D - G)!(D - G)!}{(D - 2G)!D!} \times \frac{(D - 2G)!(N - 1)!G}{(N - G)!(D - G - N)!} \times \frac{(D - N)!}{D!}&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P_{z}(N) = \frac{2(D - G)!(D - G)!(N - 1)!G(D - N)!}{D!(N - G)!(D - G - N)!D!} = \frac{38!38!(N - 1)!(54 - N)!32}{54!(N - 16)!(38 - N)!54!}.&lt;/script&gt;

&lt;p&gt;Finally, we can plot this function as shown below and sum up over all possible values of &lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt; to calculate a total probability of&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P_{tot} = \sum_{N = G}^{D - G} P_{z}(N) = 3.508 \times 10^{-12}.&lt;/script&gt;

&lt;div align=&quot;center&quot;&gt;&lt;div id=&quot;includedContent&quot;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Think about that for a second. That means that even if we played three billion times, we would still only have about a 1% chance of a zero match game occurring. And yet it happened to us in real life. I would say that we should have bought a lottery ticket, but sadly that’s not how random variables work. As for the second part of the question, we can easily calculate the zero match probability for larger/smaller grid sizes or more/fewer unique images simply by varying &lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;D&lt;/script&gt; respectively in the same equations above. As your intuition might have guessed, more unique images and smaller grids produce higher zero match probabilities, but play around with the interactive graph below to see exactly how it varies. Hope everyone has as much “divertido” with this as I did!&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;div id=&quot;includedContent2&quot;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h6&gt;The &lt;a href=&quot;https://github.com/tefirman/RiddlerCode/blob/master/Riddler_May25_Loteria.py&quot;&gt;python code&lt;/a&gt; used to generate the values and figures above are available on &lt;a href=&quot;https://github.com/tefirman&quot;&gt;my GitHub page&lt;/a&gt;. &lt;a href=&quot;https://github.com/tefirman/RiddlerCode/blob/master/LoteriaSimulations.csv&quot;&gt;Simulations&lt;/a&gt; that validate the equations above are also available.


&lt;/h6&gt;</content><summary type="html">Learn Spanish and gamble all at the same time!!!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/images/Loteria.png" /></entry><entry><title type="html">Uneven Democracy</title><link href="/blog/UnequalRepresentation/" rel="alternate" type="text/html" title="Uneven Democracy" /><published>2019-02-22T00:00:00-08:00</published><updated>2019-02-22T00:00:00-08:00</updated><id>/blog/UnequalRepresentation</id><content type="html" xml:base="/blog/UnequalRepresentation/">&lt;head&gt;
&lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot; /&gt;
&lt;meta name=&quot;twitter:creator&quot; content=&quot;@tefirman51&quot; /&gt;
&lt;meta name=&quot;twitter:site&quot; content=&quot;@tefirman51&quot; /&gt;
&lt;meta name=&quot;twitter:title&quot; content=&quot;Uneven Democracy&quot; /&gt;
&lt;meta name=&quot;twitter:description&quot; content=&quot;Not all votes are created equal...&quot; /&gt;
&lt;meta name=&quot;twitter:image:src&quot; content=&quot;https://tefirman.github.io/images/TippedScales.png&quot; /&gt;
&lt;meta name=&quot;twitter:image:width&quot; content=&quot;280&quot; /&gt;
&lt;meta name=&quot;twitter:image:height&quot; content=&quot;150&quot; /&gt;
&lt;script src=&quot;/assets/js/jquery.min.js&quot;&gt;&lt;/script&gt; 
&lt;script&gt; 
$(function(){
  $(&quot;#includedContent&quot;).load(&quot;/images/HouseSenateResultsByYear.html&quot;); 
});
&lt;/script&gt; 
&lt;script&gt; 
$(function(){
  $(&quot;#includedContent2&quot;).load(&quot;/images/HouseSenateResultsByYear_Alternates.html&quot;); 
});
&lt;/script&gt; 
&lt;script&gt; 
$(function(){
  $(&quot;#includedContent3&quot;).load(&quot;/images/TotalPowerMap_Large.html&quot;); 
});
&lt;/script&gt; 
&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;
&lt;script async=&quot;&quot; src=&quot;https://www.googletagmanager.com/gtag/js?id=UA-141691742-4&quot;&gt;&lt;/script&gt;
&lt;script&gt;
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-141691742-4');
&lt;/script&gt;
&lt;/head&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML&quot; async=&quot;&quot;&gt;&lt;/script&gt;

&lt;p&gt;Americans pride themselves on their democracy, on the idea that everyone has an equal voice in our government, and to be honest, I’m pretty proud of it too (less so in recent years). But if anyone tells you that every citizen truly has an &lt;i&gt;equal&lt;/i&gt; voice in our system, they possess one of two things: 1. a misunderstanding of how our government is designed and operated, or 2. a loose definition of the term “equal”. In an ideal scenario, each person’s voice would be equally valued and political representation on a macroscopic level would be proportional to the views of the American public. As a simple example, a group of 1800 Democrats and 1200 Republicans could be represented by 9 Democrats and 6 Republicans, giving each voter a representative power of 1/200 or 0.005. But let’s say that a neighboring group of 900 Republicans and 600 Democrats was represented by 9 Republicans and 6 Democrats. Locally, this is proportional and fair, but macroscopically, we now have equal representation (15-15) for unequal populations (2400-2100) because the second group has twice the representative power (1/100 or 0.01).&lt;/p&gt;

&lt;p&gt;This may seem like an unrealistic example, but this is basically how the United States Senate has operated since 1789 thanks to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Connecticut_Compromise&quot;&gt;Connecticut Compromise&lt;/a&gt;. Gerrymandering has led to similar (but less extreme) situations in the House of Representatives. To illustrate this, we can calculate the representative power of each state or congressional district by dividing the number of representatives/senators they have by the number of voters who participated. Just to clarify units, we will define a 1 representative to 1 voter ratio as a “rep” which would make 1 representative to 1,000,000 voters a “microrep” or μrep. Furthermore, since there are 435 representatives in the House and 100 in the Senate, we will define “Total Power” as 4.35*(Senate Power) + (House Power). The map below illustrates darker colors as higher representative powers and shows the exact values for a congressional district when you hover over it.&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;div id=&quot;includedContent3&quot;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
&lt;!-- &lt;span class=&quot;image fit&quot;&gt;&lt;img src=&quot;/images/PowerMapsFigure.png&quot; alt=&quot;&quot; /&gt;&lt;/span&gt; --&gt;
&lt;!-- &lt;a onclick=&quot;alert('Hello world!')&quot; class=&quot;button special&quot;&gt;Special&lt;/a&gt; --&gt;&lt;/p&gt;

&lt;p&gt;Taking a look at the two extremes, we can see a pretty shocking disparity in representation. A voter in Wyoming has more representative power than a Floridian, a Pennsylvanian, a New Yorker, a Californian, an Ohioan, a North Carolinian, a Michigander, an Illinoisan, and a Texan &lt;i&gt;combined&lt;/i&gt;. This is purely due to the fact that while each of these five states are represented by two senators, only 200,000 voters pick those two people in Wyoming while multiple millions of voters pick them in each of the other four states. Using state-by-state voter demographics, we can expand the scope of our power metric to compare the average representative power of different demographics to see if any group in particular benefits from this arrangement. Comparisons based on sex and age show fairly similar representation between different groups, but race, political affiliation, and urban/rural delineation produce very unbalanced playing fields. As seen in the tables below, white voters have about 10% more representative power than non-white voters, Republican voters have 29% more than Democratic voters, and rural voters (based on &lt;a href=&quot;https://github.com/theatlantic/citylab-data/blob/master/citylab-congress/citylab_cdi.csv&quot;&gt;CityLab’s classification&lt;/a&gt;) have 39% more than urban voters. This is again due to the disparate proportioning of representatives in the Senate and highlights the inherent representative inequity in our country’s democracy.&lt;/p&gt;

&lt;style&gt;
table {
    border-spacing: 0;
    width: 100%;
    border: 1px solid #ddd;
    line-height: 1
}

th {
    cursor: pointer;
}

th, td {
    text-align: left;
    padding: 0px;
    vertical-align: middle;
    min-height: 1px;
    border-left: 1px solid #ddd;
    border-right: 1px solid #ddd;
}

tr:nth-child(even) {
    background-color: #f2f2f2
}
&lt;/style&gt;

&lt;h3&gt;Representative Power By Race in 2016 (microreps)&lt;/h3&gt;
&lt;table id=&quot;myTable2&quot;&gt;
  &lt;tr height=&quot;50&quot;&gt;
   &lt;!--When a header is clicked, run the sortTable function, with a parameter, 0 for sorting by names, 1 for sorting by country:--&gt;  
    &lt;th onclick=&quot;sortTable2(0)&quot;&gt;Race&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber2(1)&quot;&gt;House Power&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber2(2)&quot;&gt;Senate Power&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber2(3)&quot;&gt;Total Power&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;White&lt;/td&gt;
    &lt;td&gt;3.36&lt;/td&gt;
    &lt;td&gt;0.79&lt;/td&gt;
    &lt;td&gt;6.81&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Black&lt;/td&gt;
    &lt;td&gt;3.40&lt;/td&gt;
    &lt;td&gt;0.66&lt;/td&gt;
    &lt;td&gt;6.26&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Asian&lt;/td&gt;
    &lt;td&gt;3.63&lt;/td&gt;
    &lt;td&gt;0.72&lt;/td&gt;
    &lt;td&gt;6.77&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Hispanic&lt;/td&gt;
    &lt;td&gt;3.61&lt;/td&gt;
    &lt;td&gt;0.50&lt;/td&gt;
    &lt;td&gt;5.79&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;script&gt;
function sortTable2(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById(&quot;myTable2&quot;);
  switching = true;
  //Set the sorting direction to ascending:
  dir = &quot;desc&quot;; 
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i &lt; (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].getElementsByTagName(&quot;TD&quot;)[n];
      y = rows[i + 1].getElementsByTagName(&quot;TD&quot;)[n];
      /*check if the two rows should switch place,
      based on the direction, asc or desc:*/
      if (dir == &quot;asc&quot;) {
        if (x.innerHTML.toLowerCase() &gt; y.innerHTML.toLowerCase()) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      } else if (dir == &quot;desc&quot;) {
        if (x.innerHTML.toLowerCase() &lt; y.innerHTML.toLowerCase()) {
          //if so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      //Each time a switch is done, increase this count by 1:
      switchcount ++;      
    } else {
      /*If no switching has been done AND the direction is &quot;asc&quot;,
      set the direction to &quot;desc&quot; and run the while loop again.*/
      if (switchcount == 0 &amp;&amp; dir == &quot;desc&quot;) {
        dir = &quot;asc&quot;;
        switching = true;
      }
    }
  }
}

function sortTableNumber2(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById(&quot;myTable2&quot;);
  switching = true;
  //Set the sorting direction to ascending:
  dir = &quot;desc&quot;; 
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i &lt; (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].getElementsByTagName(&quot;TD&quot;)[n];
      y = rows[i + 1].getElementsByTagName(&quot;TD&quot;)[n];
      /*check if the two rows should switch place,
      based on the direction, asc or desc:*/
      if (dir == &quot;asc&quot;) {
        if (Number(x.innerHTML) &gt; Number(y.innerHTML)) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      } else if (dir == &quot;desc&quot;) {
        if (Number(x.innerHTML) &lt; Number(y.innerHTML)) {
          //if so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      //Each time a switch is done, increase this count by 1:
      switchcount ++;      
    } else {
      /*If no switching has been done AND the direction is &quot;asc&quot;,
      set the direction to &quot;desc&quot; and run the while loop again.*/
      if (switchcount == 0 &amp;&amp; dir == &quot;desc&quot;) {
        dir = &quot;asc&quot;;
        switching = true;
      }
    }
  }
}
&lt;/script&gt;

&lt;h3&gt; Representative Power By Political Party in 2016 (microreps)&lt;/h3&gt;
&lt;table id=&quot;myTable3&quot;&gt;
  &lt;tr height=&quot;50&quot;&gt;
   &lt;!--When a header is clicked, run the sortTable function, with a parameter, 0 for sorting by names, 1 for sorting by country:--&gt;  
    &lt;th onclick=&quot;sortTable3(0)&quot;&gt;Party&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber3(1)&quot;&gt;House Power&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber3(2)&quot;&gt;Senate Power&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber3(3)&quot;&gt;Total Power&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Republican&lt;/td&gt;
    &lt;td&gt;3.85&lt;/td&gt;
    &lt;td&gt;1.00&lt;/td&gt;
    &lt;td&gt;8.19&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Democratic&lt;/td&gt;
    &lt;td&gt;3.16&lt;/td&gt;
    &lt;td&gt;0.73&lt;/td&gt;
    &lt;td&gt;6.33&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Other&lt;/td&gt;
    &lt;td&gt;0.00&lt;/td&gt;
    &lt;td&gt;0.43&lt;/td&gt;
    &lt;td&gt;1.88&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;script&gt;
function sortTable3(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById(&quot;myTable3&quot;);
  switching = true;
  //Set the sorting direction to ascending:
  dir = &quot;desc&quot;; 
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i &lt; (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].getElementsByTagName(&quot;TD&quot;)[n];
      y = rows[i + 1].getElementsByTagName(&quot;TD&quot;)[n];
      /*check if the two rows should switch place,
      based on the direction, asc or desc:*/
      if (dir == &quot;asc&quot;) {
        if (x.innerHTML.toLowerCase() &gt; y.innerHTML.toLowerCase()) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      } else if (dir == &quot;desc&quot;) {
        if (x.innerHTML.toLowerCase() &lt; y.innerHTML.toLowerCase()) {
          //if so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      //Each time a switch is done, increase this count by 1:
      switchcount ++;      
    } else {
      /*If no switching has been done AND the direction is &quot;asc&quot;,
      set the direction to &quot;desc&quot; and run the while loop again.*/
      if (switchcount == 0 &amp;&amp; dir == &quot;desc&quot;) {
        dir = &quot;asc&quot;;
        switching = true;
      }
    }
  }
}

function sortTableNumber3(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById(&quot;myTable3&quot;);
  switching = true;
  //Set the sorting direction to ascending:
  dir = &quot;desc&quot;; 
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i &lt; (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].getElementsByTagName(&quot;TD&quot;)[n];
      y = rows[i + 1].getElementsByTagName(&quot;TD&quot;)[n];
      /*check if the two rows should switch place,
      based on the direction, asc or desc:*/
      if (dir == &quot;asc&quot;) {
        if (Number(x.innerHTML) &gt; Number(y.innerHTML)) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      } else if (dir == &quot;desc&quot;) {
        if (Number(x.innerHTML) &lt; Number(y.innerHTML)) {
          //if so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      //Each time a switch is done, increase this count by 1:
      switchcount ++;      
    } else {
      /*If no switching has been done AND the direction is &quot;asc&quot;,
      set the direction to &quot;desc&quot; and run the while loop again.*/
      if (switchcount == 0 &amp;&amp; dir == &quot;desc&quot;) {
        dir = &quot;asc&quot;;
        switching = true;
      }
    }
  }
}
&lt;/script&gt;

&lt;h3&gt; Representative Power By Urban, Suburban, and Rural Classification in 2016 (microreps)&lt;/h3&gt;
&lt;table id=&quot;myTable4&quot;&gt;
  &lt;tr height=&quot;50&quot;&gt;
   &lt;!--When a header is clicked, run the sortTable function, with a parameter, 0 for sorting by names, 1 for sorting by country:--&gt;  
    &lt;th onclick=&quot;sortTable4(0)&quot;&gt;Party&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber4(1)&quot;&gt;House Power&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber4(2)&quot;&gt;Senate Power&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber4(3)&quot;&gt;Total Power&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Rural&lt;/td&gt;
    &lt;td&gt;3.29&lt;/td&gt;
    &lt;td&gt;1.18&lt;/td&gt;
    &lt;td&gt;8.42&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Suburban&lt;/td&gt;
    &lt;td&gt;3.26&lt;/td&gt;
    &lt;td&gt;0.69&lt;/td&gt;
    &lt;td&gt;6.25&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Urban&lt;/td&gt;
    &lt;td&gt;3.90&lt;/td&gt;
    &lt;td&gt;0.49&lt;/td&gt;
    &lt;td&gt;6.05&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;script&gt;
function sortTable4(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById(&quot;myTable4&quot;);
  switching = true;
  //Set the sorting direction to ascending:
  dir = &quot;desc&quot;; 
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i &lt; (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].getElementsByTagName(&quot;TD&quot;)[n];
      y = rows[i + 1].getElementsByTagName(&quot;TD&quot;)[n];
      /*check if the two rows should switch place,
      based on the direction, asc or desc:*/
      if (dir == &quot;asc&quot;) {
        if (x.innerHTML.toLowerCase() &gt; y.innerHTML.toLowerCase()) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      } else if (dir == &quot;desc&quot;) {
        if (x.innerHTML.toLowerCase() &lt; y.innerHTML.toLowerCase()) {
          //if so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      //Each time a switch is done, increase this count by 1:
      switchcount ++;      
    } else {
      /*If no switching has been done AND the direction is &quot;asc&quot;,
      set the direction to &quot;desc&quot; and run the while loop again.*/
      if (switchcount == 0 &amp;&amp; dir == &quot;desc&quot;) {
        dir = &quot;asc&quot;;
        switching = true;
      }
    }
  }
}

function sortTableNumber4(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById(&quot;myTable4&quot;);
  switching = true;
  //Set the sorting direction to ascending:
  dir = &quot;desc&quot;; 
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i &lt; (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].getElementsByTagName(&quot;TD&quot;)[n];
      y = rows[i + 1].getElementsByTagName(&quot;TD&quot;)[n];
      /*check if the two rows should switch place,
      based on the direction, asc or desc:*/
      if (dir == &quot;asc&quot;) {
        if (Number(x.innerHTML) &gt; Number(y.innerHTML)) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      } else if (dir == &quot;desc&quot;) {
        if (Number(x.innerHTML) &lt; Number(y.innerHTML)) {
          //if so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      //Each time a switch is done, increase this count by 1:
      switchcount ++;      
    } else {
      /*If no switching has been done AND the direction is &quot;asc&quot;,
      set the direction to &quot;desc&quot; and run the while loop again.*/
      if (switchcount == 0 &amp;&amp; dir == &quot;desc&quot;) {
        dir = &quot;asc&quot;;
        switching = true;
      }
    }
  }
}
&lt;/script&gt;

&lt;p&gt;On a macroscopic scale, this leads to representation that is disproportionate to the actual populations they represent. Look at the percentages of elected congressional representatives in each party compared to the number of voters who actually voted for that party shown in the first figure below. Wins and votes in the House of Representatives have generally been proportional because the number of representatives is allocated based on population – until 2010 that is when congressional districts were conveniently redrawn by state governments. Can we talk about 2012 please? Democrats received more votes in aggregate during that election and only received 45% of the delegates. The equivalent graph applied to the Senate is even worse. For each year, we can add up the vote totals for each senator’s most recent election (e.g. for 2016, a senator elected in 2014 would contribute their 2014 vote totals) and again compare votes by party to wins by party. As you can see in the second figure, the relationship between these two values is loose at best. Since 2004, the percentage of votes cast for Republican candidates has never exceeded that of Democratic candidates, and yet, four of the seven congresses have had as many or more Republican Senators as Democratic Senators. That doesn’t exactly seem fair to me…&lt;/p&gt;

&lt;div id=&quot;includedContent&quot;&gt;&lt;/div&gt;

&lt;p&gt;So what does this imbalance of representative power lead to? Unpopular ideas becoming law and popular ideas getting ignored. Despite being &lt;a href=&quot;https://www.washingtonpost.com/news/the-fix/wp/2017/07/28/republicans-obamacare-repeal-was-never-really-that-popular/?utm_term=.3e02025c1297&quot;&gt;very unpopular amongst the general public&lt;/a&gt;, the attempted “skinny repeal” of Obamacare in 2017 almost passed in the Senate with votes from Senators representing only 39.8% of American voters, and it would have, were it not for the dramatic thumbs down of the late Senator John McCain. What did become law was the 2017 Tax Cuts and Jobs Act, &lt;a href=&quot;https://news.gallup.com/poll/243611/disapprove-approve-2017-tax-cuts.aspx&quot;&gt;another unpopular bill&lt;/a&gt; which only needed the votes from Senators representing 40.2% of the electorate. The Supreme Court confirmations of both Neil Gorsuch and Brett Kavanaugh were pushed through by Senators elected by less than 42% of the electorate. Even ignoring actual politics, it’s counterintuitive that such a diverse country would elect congress after congress of old white dudes rather than the melting pot that America so eagerly describes itself as.&lt;/p&gt;

&lt;p&gt;So why does this happen and what can we do to fix it? &lt;a href=&quot;http://www.pewresearch.org/fact-tank/2018/05/21/u-s-voter-turnout-trails-most-developed-countries/&quot;&gt;Low voter turnout&lt;/a&gt; is a big factor that tends to benefit conservative candidates, which possibly explains why Republicans have received disproportionately higher representation since 2010. The 2018 midterms did show a &lt;a href=&quot;https://fivethirtyeight.com/features/the-2018-midterms-in-4-charts/&quot;&gt;huge surge in turnout&lt;/a&gt; but I can’t help but wonder if this is purely a reaction to outrage against President Trump that will quickly fade in future elections. &lt;a href=&quot;https://www.pbs.org/newshour/politics/georgia-election-fight-shows-that-black-voter-suppression-a-southern-tradition-still-flourishes&quot;&gt;Voter suppression&lt;/a&gt; continues to rear its ugly head, though often masquerading as concerns for &lt;a href=&quot;https://www.theatlantic.com/politics/archive/2018/11/how-voter-suppression-actually-works/575035/&quot;&gt;“voter fraud”&lt;/a&gt;. Encouraging those around us to get involved in democracy and protecting the voting rights of every American citizen will help to align the voices of power with the voice of the people. But the more data-centric problem I want to address is gerrymandering and the restructuring of Congress. The exact geometry of congressional districts is a very complicated issue, so I won’t get into that level of detail here (though a future post might), but there might be a simpler solution. For those of you who think I’m trying to rewrite the Constitution, take a chill pill, this is just a thought experiment.&lt;/p&gt;

&lt;p&gt;Let’s imagine a scenario where no districts are drawn. In this scenario, everyone still gets two Senators and the same amount of representatives in the House as before, but rather than voting in individual races, each person votes for a particular party (obviously this is problematic since people’s views don’t always align with any single party, but bear with me). Representatives and Senators are then divvied out to each party relative to the votes for each party. As you can see in the first two figures below, this setup compensates for most of the mismatch between votes and representation in the House, but the Senate remains inequitable. At least now the number of Senators for each party is proportional to the vote share, but Republican votes still go much further than Democratic ones. In fact, after trying a few different iterations of this model, the only version that produces a Senate that somewhat accurately represents the votes of the people (as seen in the third figure below) is when Senators are reapportioned based on census populations, the number of Senators is increased to 150, and people again vote for a party instead of a candidate. Crazy how far you need to go just to produce a level playing field…&lt;/p&gt;

&lt;div id=&quot;includedContent2&quot;&gt;&lt;/div&gt;

&lt;p&gt;I realize that the founding fathers established our government this way for a reason, that the Connecticut Compromise was necessary to get smaller states to ratify the Constitution, and that, like the Electoral College, it helps to guard against the &lt;a href=&quot;https://en.wikipedia.org/wiki/Tyranny_of_the_majority&quot;&gt;tyranny of the majority&lt;/a&gt;. But right now, it feels a hell of a lot like we’re at risk of the opposite. A congressional majority elected by a minority of Americans is enabling an unpopular president (also elected by a minority of Americans) to enact legislation opposed by a majority of Americans. The framers were very intentional in their preambular word choice of forming a &lt;i&gt;more perfect&lt;/i&gt; union, implying a good start but plenty of room to improve. Maybe it’s time to start thinking about making Congress a bit more perfect in terms of representation.&lt;/p&gt;

&lt;h6&gt;All statistics presented here were calculated using &lt;a href=&quot;https://transition.fec.gov/pubrec/electionresults.shtml&quot;&gt;official election results from the FEC&lt;/a&gt;. The &lt;a href=&quot;https://github.com/tefirman/StatisticalStumbles/tree/master/ElectionResults&quot;&gt;relevant data&lt;/a&gt; and &lt;a href=&quot;https://github.com/tefirman/StatisticalStumbles/blob/master/ElectionResults.ipynb&quot;&gt;python code&lt;/a&gt; used to calculate them are available on &lt;a href=&quot;https://github.com/tefirman&quot;&gt;my GitHub page&lt;/a&gt;.








&lt;/h6&gt;</content><summary type="html">Based on how the American government was designed, not all votes are created equal...</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/images/TippedScales.png" /></entry><entry><title type="html">Riddler Answer: Printers are from Mars, Scanners are from Venus</title><link href="/blog/MartianPrinter/" rel="alternate" type="text/html" title="Riddler Answer: Printers are from Mars, Scanners are from Venus" /><published>2019-01-14T00:00:00-08:00</published><updated>2019-01-14T00:00:00-08:00</updated><id>/blog/MartianPrinter</id><content type="html" xml:base="/blog/MartianPrinter/">&lt;head&gt;
&lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot; /&gt;
&lt;meta name=&quot;twitter:creator&quot; content=&quot;@tefirman51&quot; /&gt;
&lt;meta name=&quot;twitter:site&quot; content=&quot;@tefirman51&quot; /&gt;
&lt;meta name=&quot;twitter:title&quot; content=&quot;Riddler Answer: Printers are from Mars, Scanners are from Venus&quot; /&gt;
&lt;meta name=&quot;twitter:description&quot; content=&quot;Captain Blondebeard would be so proud...&quot; /&gt;
&lt;meta name=&quot;twitter:image:src&quot; content=&quot;https://tefirman.github.io/images/Mars.jpg&quot; /&gt;
&lt;meta name=&quot;twitter:image:width&quot; content=&quot;280&quot; /&gt;
&lt;meta name=&quot;twitter:image:height&quot; content=&quot;150&quot; /&gt;
&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;
&lt;script async=&quot;&quot; src=&quot;https://www.googletagmanager.com/gtag/js?id=UA-141691742-5&quot;&gt;&lt;/script&gt;
&lt;script&gt;
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-141691742-5');
&lt;/script&gt;
&lt;/head&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML&quot; async=&quot;&quot;&gt;&lt;/script&gt;

&lt;p&gt;This week’s &lt;a href=&quot;https://fivethirtyeight.com/features/in-space-no-one-can-hear-your-3d-printer-die/&quot;&gt;edition&lt;/a&gt; of the Riddler from Jerry Myers takes us to our rusty planetary neighbor and asks us to calculate the odds of our survival based on three (fairly unreliable) 3D printers. With Mars being a harsh environment, a vital piece of equipment will break exactly once per day and one of the printers must print a replacement part. However, each printer can only print one piece per day and they each have a 10%, 7.5%, and 5% chance respectively of breaking each day. Based on this less than ideal scenario, what are the odds that you would survive a 1825 day long journey?&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;If I understand the description of the scenario correctly, the only way you would die is if all three printers break in the same day because all other scenarios are fixable. For instance, if printers A and B both fail, printer C can print a part to fix printer B, printer B can then print a piece to fix printer A, and finally, printer A can then print a new part for the vital equipment. By this logic, the probability of surviving the entire journey would be&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P = (100\% - 10\% * 7.5\% * 5\%)^{1825} = 50.4\%.&lt;/script&gt;

&lt;p&gt;However, the problem gets much more interesting if we make it a bit more realistic. Specifically, we can make the vital equipment/printer failures a random process using a &lt;a href=&quot;https://en.wikipedia.org/wiki/Gillespie_algorithm&quot;&gt;Gillespie algorithm&lt;/a&gt; like the one shown below. On average, one piece of vital equipment will still break each day and each printer will have the same odds of breaking each day, but there is now a significant chance of having multiple breakages in a single day. When anything breaks, the next available printer will print a replacement but then remain unavailable for the next 24 hours to recharge.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import numpy as np

printerLag = 1.0 # Number of days before a printer is ready to print again
numDays = 1825 # Number of days in your martian adventure
printerRates = np.array([0.05,0.075,0.1]) # Probabilities of each printer breaking
vitalRate = 1.0 # Rate at which vital equipment breaks (measured in malfunctions per day)
numSims = 10000 # Number of simulations to run before averaging

times = []
for numSim in range(numSims):
    if (numSim + 1)%1000 == 0:
        print('Try #' + str(numSim + 1))
    time = 0.0
    printers = np.ones(len(printerRates)) # 1 if operational, 0 if broken
    lastPrint = -1*np.ones(len(printerRates)) # Time of each printer's last print job
    while time &amp;lt; numDays:
        probs = np.append(printerRates*printers,vitalRate)
        overallRate = sum(probs)
        randNum1 = np.random.rand(1)[0]
        time -= np.log(randNum1)/overallRate
        probs = probs/overallRate
        randNum2 = np.random.rand(1)[0]
        while np.any(printers == 0) and np.sum(np.all([printers == 1,time - lastPrint &amp;gt;= printerLag],axis=0)) &amp;gt; 0:
            fixInd = np.where(printers == 0)[0][-1]
            printInd = np.where(np.all([printers == 1,time - lastPrint &amp;gt;= printerLag],axis=0))[0][0]
            printers[fixInd] = 1
            lastPrint[printInd] += 1
            del fixInd
            del printInd
        ind = np.where([randNum2 &amp;lt;= sum(probs[:ind + 1]) for ind in range(len(probs))])[0][0]
        if ind &amp;lt; len(printers):
            printers[ind] = 0
            if np.sum(np.all([printers == 1,time - lastPrint &amp;gt;= printerLag],axis=0)) &amp;gt; 0:
                printInd = np.where(np.all([printers == 1,time - lastPrint &amp;gt;= printerLag],axis=0))[0][0]
                lastPrint[printInd] = time
                printers[ind] = 1
                del printInd
        else:
            if np.any(np.all([printers == 1,time - lastPrint &amp;gt;= printerLag],axis=0)):
                printInd = np.where(np.all([printers == 1,time - lastPrint &amp;gt;= printerLag],axis=0))[0][0]
                lastPrint[printInd] = time
                del printInd
            else:
                break
        del ind
    times.append(time)
del numSim

print('Average Survival Time = ' + str(round(np.average(times),1)) + \
' +/- ' + str(round(np.std(times),1)) + ' days')
print('Probability of Survival = ' + str(round(100*sum(np.array(times) &amp;gt;= numDays)/len(times),1)) + '%')
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;/images/SurvivalProb.png&quot; alt=&quot;&quot; /&gt;&lt;img src=&quot;/images/SurvivalProbability_NumPrinters.png&quot; alt=&quot;&quot; /&gt;&lt;img src=&quot;/images/SurvivalProbability_PrinterLag.png&quot; alt=&quot;&quot; /&gt;&lt;/span&gt;This added stochasticity changes the entire game. We intrepid Riddler-nauts now have essentially a zero percent chance of surviving our martian journey with an average survival of &lt;script type=&quot;math/tex&quot;&gt;13.2 \pm 12.6&lt;/script&gt; days. So what needs to change??? What do our highly-skilled RASA engineers need to focus on to get us to the 1825 day finish line? For starters, let’s pretend that the &lt;a href=&quot;https://fivethirtyeight.com/features/how-far-would-you-go-to-rig-a-coin-flip/&quot;&gt;Riddler Nation Senate&lt;/a&gt; decided to approve funding for as many 5% printers as we need to have a 50% chance of survival (man, those senators love their coin flips). If that were the case, we would need seven printers instead of three, as seen in the second figure. But with &lt;a href=&quot;http://www.realclearfuture.com/articles/2017/06/01/elon_musk_is_still_the_king_of_low-cost_space_launch_111957.html&quot;&gt;space travel costing $1250 per pound at best&lt;/a&gt;, each &lt;a href=&quot;https://www.homedepot.com/p/Dremel-Digilab-3D45-Advanced-Idea-Builder-3D-Printer-with-Built-In-WiFi-Guided-Leveling-and-RFID-Filament-Recognition-3D45-01/303720938?cm_mmc=Shopping%7CG%7CVF%7CD25T%7C25-9_PORTABLE+POWER%7CDREMEL%7CNA%7CVersa%7c71700000037187511%7c58700004135694341%7c92700034455553438&amp;amp;gclid=EAIaIQobChMIrqDZuYLv3wIVdx-tBh1yhQN-EAQYBCABEgKaqvD_BwE&amp;amp;gclsrc=aw.ds&quot;&gt;printer&lt;/a&gt; weighing 50 pounds, and each printer costing $1500, the senators are starting to clamor about the extra $256K. Instead, they are encouraging us to optimize the three printers we already have. In the end, lowering the breaking probability of our printers won’t help much – even if the printers never break, it’s reasonably probable for more than three pieces of vital machinery to break in a single day and the lag between printing jobs will do us in. Sure enough, simulating this perfect-printer scenario produces an average survival of &lt;script type=&quot;math/tex&quot;&gt;20.5 \pm 20.0&lt;/script&gt; days so we should definitely focus on reducing the rate-limiting 24 hour recharging period. In order to reach the 50% goal set by the Senate with our original three printers, we would need to lower the lag time to just under 3 hours as seen in the final figure.&lt;/p&gt;

&lt;p&gt;This problem is a perfect example of how deterministic, average-based methods can sometimes be misrepresentative of the real scenario. These simpler methods told us that we had a fighting chance, but let’s be honest, malfunctions aren’t going to happen like clockwork. Only by accounting for the randomness and noise of the stochastic processes of the real world do we realize that something needs to change or we’re going to end up as martian toast. If anyone in Riddler Nation wants to mess around with the simulation or see if a different strategy would be more effective, the underlying code is available &lt;a href=&quot;https://github.com/tefirman/RiddlerCode/blob/master/MartianPrinters.py&quot;&gt;here&lt;/a&gt;. Safe travels, Riddler-nauts!!!&lt;/p&gt;</content><summary type="html">Captain Blondebeard would be so proud...</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/images/Mars.jpg" /></entry><entry><title type="html">When Red Becomes Purple</title><link href="/blog/DougCoRecap/" rel="alternate" type="text/html" title="When Red Becomes Purple" /><published>2018-11-23T00:00:00-08:00</published><updated>2018-11-23T00:00:00-08:00</updated><id>/blog/DougCoRecap</id><content type="html" xml:base="/blog/DougCoRecap/">&lt;head&gt;
&lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot; /&gt;
&lt;meta name=&quot;twitter:creator&quot; content=&quot;@tefirman51&quot; /&gt;
&lt;meta name=&quot;twitter:site&quot; content=&quot;@tefirman51&quot; /&gt;
&lt;meta name=&quot;twitter:title&quot; content=&quot;When Red Becomes Purple&quot; /&gt;
&lt;meta name=&quot;twitter:description&quot; content=&quot;Colorado's 6th Congressional District is a perfect example of why every turf matters...&quot; /&gt;
&lt;meta name=&quot;twitter:image:src&quot; content=&quot;https://tefirman.github.io/images/DougCoPurple.png&quot; /&gt;
&lt;meta name=&quot;twitter:image:width&quot; content=&quot;280&quot; /&gt;
&lt;meta name=&quot;twitter:image:height&quot; content=&quot;150&quot; /&gt;
&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;
&lt;script async=&quot;&quot; src=&quot;https://www.googletagmanager.com/gtag/js?id=UA-141691742-7&quot;&gt;&lt;/script&gt;
&lt;script&gt;
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-141691742-7');
&lt;/script&gt;
&lt;/head&gt;

&lt;p&gt;Canvassing in any scenario is uncomfortable. Canvassing for a Democratic candidate in a historically Republican district is panic-attack-inducing. But in any campaign, it’s a necessary component. So when my partner and I began volunteering for the Douglas County portion of Jason Crow’s congressional campaign in Colorado’s 6th district (CO-6), it seemed like a daunting but worthy challenge. Given the chaotic state of our democracy, a little more is required of average Americans. We are called to endure the occasional door slam to find the few individuals who remain undecided, who aren’t sure where to vote, who need a little extra motivation to even vote at all. We are called to tolerate the surly “leave me alone”’s to ensure that the voice of every citizen is heard in our society.&lt;/p&gt;

&lt;p&gt;These efforts were particularly necessary in the region that we were assigned by the Crow campaign. In the &lt;a href=&quot;https://www.douglas.co.us/elections/historical-election-data/&quot;&gt;three previous House races in Douglas County&lt;/a&gt;, Democrats have won exactly zero precincts and lost by an average of more than 26 percentage points. With this level of incumbency advantage, we had our work cut out for us, but other indicators left a whiff of possibility in the air. Unprecedented &lt;a href=&quot;https://www.opensecrets.org/overview/&quot;&gt;individual contribution levels&lt;/a&gt; of Democrats across the country (including &lt;a href=&quot;https://www.opensecrets.org/races/candidates?cycle=2018&amp;amp;id=CO06&amp;amp;spec=N&quot;&gt;this one&lt;/a&gt;) provided a significant advantage and could have suggested a grass roots mobilization of previously silent Democrats across the country. Midterm elections are &lt;a href=&quot;https://fivethirtyeight.com/features/trumps-approval-rating-is-up-republican-house-chances-are-down-does-that-make-any-sense/&quot;&gt;always difficult for the party controlling the White House&lt;/a&gt;, and with the &lt;a href=&quot;https://projects.fivethirtyeight.com/trump-approval-ratings/?ex_cid=rrpromo&quot;&gt;considerable unpopularity of President Trump&lt;/a&gt;, the fact that the Republican incumbent Mike Coffman &lt;a href=&quot;https://projects.fivethirtyeight.com/congress-trump-score/mike-coffman/&quot;&gt;voted with Trump 96% of the time&lt;/a&gt; was a major selling point to independent voters. And having a moderate candidate with a military background as an Army Ranger and a progressive stance on gun violence in a region deeply effected by several tragic shootings in recent years would definitely make a difference. So in the days leading up to the election, when Jason Crow’s aides would jokingly ask “you gonna win us DougCo?”, I understood the sarcasm but confidently replied, “we’ll win a few precincts for sure.”&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;/images/DougCoHistory.png&quot; alt=&quot;&quot; /&gt;&lt;/span&gt;As results came pouring in, this prediction turned out to be an understatement. Jason Crow went on to take thirteen precincts in Douglas County and only lost the county by six percentage points. Losing in any fashion may not sound like an uplifting fact, but the 22.0% jump from losing by 27.9% in 2016 to only 5.9% in 2018 is the largest gain out of all the counties in the district (Adams: 16.4%, Arapahoe: 19.8%).&lt;/p&gt;

&lt;style&gt;
table {
    border-spacing: 0;
    width: 100%;
    border: 1px solid #ddd;
    line-height: 1
}

th {
    cursor: pointer;
}

th, td {
    text-align: left;
    padding: 0px;
    vertical-align: middle;
    min-height: 1px;
    border-left: 1px solid #ddd;
    border-right: 1px solid #ddd;
}

tr:nth-child(even) {
    background-color: #f2f2f2
}
&lt;/style&gt;

&lt;h3&gt;Recent House Races in the DougCo Portion of CO-6&lt;/h3&gt;
&lt;table id=&quot;myTable&quot;&gt;
  &lt;tr height=&quot;50&quot;&gt;
   &lt;!--When a header is clicked, run the sortTable function, with a parameter, 0 for sorting by names, 1 for sorting by country:--&gt;  
    &lt;th onclick=&quot;sortTableNumber(0)&quot;&gt;Year&lt;/th&gt;
    &lt;th onclick=&quot;sortTable(1)&quot;&gt;Dem. Candidate&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber(2)&quot;&gt;Vote %&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber(3)&quot;&gt;Margin of Defeat (%)&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber(4)&quot;&gt;Precincts Won&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;2012&lt;/td&gt;
    &lt;td&gt;Joe Miklosi&lt;/td&gt;
    &lt;td&gt;35.4&lt;/td&gt;
    &lt;td&gt;24.7&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;2014&lt;/td&gt;
    &lt;td&gt;Andrew Romanoff&lt;/td&gt;
    &lt;td&gt;34.5&lt;/td&gt;
    &lt;td&gt;27.5&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;2016&lt;/td&gt;
    &lt;td&gt;Morgan Carroll&lt;/td&gt;
    &lt;td&gt;33.3&lt;/td&gt;
    &lt;td&gt;27.9&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;2018&lt;/td&gt;
    &lt;td&gt;Jason Crow&lt;/td&gt;
    &lt;td&gt;45.8&lt;/td&gt;
    &lt;td&gt;5.9&lt;/td&gt;
    &lt;td&gt;13&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;script&gt;
function sortTable(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById(&quot;myTable&quot;);
  switching = true;
  //Set the sorting direction to ascending:
  dir = &quot;desc&quot;; 
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i &lt; (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].getElementsByTagName(&quot;TD&quot;)[n];
      y = rows[i + 1].getElementsByTagName(&quot;TD&quot;)[n];
      /*check if the two rows should switch place,
      based on the direction, asc or desc:*/
      if (dir == &quot;asc&quot;) {
        if (x.innerHTML.toLowerCase() &gt; y.innerHTML.toLowerCase()) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      } else if (dir == &quot;desc&quot;) {
        if (x.innerHTML.toLowerCase() &lt; y.innerHTML.toLowerCase()) {
          //if so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      //Each time a switch is done, increase this count by 1:
      switchcount ++;      
    } else {
      /*If no switching has been done AND the direction is &quot;asc&quot;,
      set the direction to &quot;desc&quot; and run the while loop again.*/
      if (switchcount == 0 &amp;&amp; dir == &quot;desc&quot;) {
        dir = &quot;asc&quot;;
        switching = true;
      }
    }
  }
}

function sortTableNumber(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById(&quot;myTable&quot;);
  switching = true;
  //Set the sorting direction to ascending:
  dir = &quot;desc&quot;; 
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i &lt; (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].getElementsByTagName(&quot;TD&quot;)[n];
      y = rows[i + 1].getElementsByTagName(&quot;TD&quot;)[n];
      /*check if the two rows should switch place,
      based on the direction, asc or desc:*/
      if (dir == &quot;asc&quot;) {
        if (Number(x.innerHTML) &gt; Number(y.innerHTML)) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      } else if (dir == &quot;desc&quot;) {
        if (Number(x.innerHTML) &lt; Number(y.innerHTML)) {
          //if so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      //Each time a switch is done, increase this count by 1:
      switchcount ++;      
    } else {
      /*If no switching has been done AND the direction is &quot;asc&quot;,
      set the direction to &quot;desc&quot; and run the while loop again.*/
      if (switchcount == 0 &amp;&amp; dir == &quot;desc&quot;) {
        dir = &quot;asc&quot;;
        switching = true;
      }
    }
  }
}
&lt;/script&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img src=&quot;/images/DougCoDownTheBallot.png&quot; alt=&quot;&quot; /&gt;&lt;/span&gt;So what happened to Douglas County voters? Why the sudden purple hue? Races further down the ballot give us some insight into why the citizens of Douglas County voted the way they did, and we see that these results don’t quite fit the “blue wave” narrative that everyone is so fond of using. Across the board, Democrats did get a bump compared to previous years because of all the factors listed above, but some of that advantage disappears down the ballot. The higher profile races with national implications, i.e. the House and Governor’s races, only had a Republican edge of 5.9% while the race for Attorney General ballooned up to 13.5%. This could suggest that voters wanted to rebuke the White House while keeping local government conservative.&lt;/p&gt;

&lt;h3&gt;Races Down the Ballot in the DougCo Portion of CO-6&lt;/h3&gt;
&lt;table id=&quot;myTable2&quot;&gt;
  &lt;tr height=&quot;50&quot;&gt;
   &lt;!--When a header is clicked, run the sortTable function, with a parameter, 0 for sorting by names, 1 for sorting by country:--&gt;  
    &lt;th onclick=&quot;sortTable2(0)&quot;&gt;Position&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber2(1)&quot;&gt;Republican Vote %&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber2(2)&quot;&gt;Democrat Vote %&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber2(3)&quot;&gt;Margin (%)&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;House&lt;/td&gt;
    &lt;td&gt;51.7&lt;/td&gt;
    &lt;td&gt;45.8&lt;/td&gt;
    &lt;td&gt;5.9&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Governor&lt;/td&gt;
    &lt;td&gt;51.6&lt;/td&gt;
    &lt;td&gt;45.7&lt;/td&gt;
    &lt;td&gt;5.9&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Secretary of State&lt;/td&gt;
    &lt;td&gt;53.6&lt;/td&gt;
    &lt;td&gt;44.6&lt;/td&gt;
    &lt;td&gt;9.0&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;State Treasurer&lt;/td&gt;
    &lt;td&gt;54.3&lt;/td&gt;
    &lt;td&gt;43.8&lt;/td&gt;
    &lt;td&gt;10.5&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Attorney General&lt;/td&gt;
    &lt;td&gt;55.5&lt;/td&gt;
    &lt;td&gt;42.0&lt;/td&gt;
    &lt;td&gt;13.5&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;script&gt;
function sortTable2(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById(&quot;myTable2&quot;);
  switching = true;
  //Set the sorting direction to ascending:
  dir = &quot;desc&quot;; 
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i &lt; (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].getElementsByTagName(&quot;TD&quot;)[n];
      y = rows[i + 1].getElementsByTagName(&quot;TD&quot;)[n];
      /*check if the two rows should switch place,
      based on the direction, asc or desc:*/
      if (dir == &quot;asc&quot;) {
        if (x.innerHTML.toLowerCase() &gt; y.innerHTML.toLowerCase()) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      } else if (dir == &quot;desc&quot;) {
        if (x.innerHTML.toLowerCase() &lt; y.innerHTML.toLowerCase()) {
          //if so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      //Each time a switch is done, increase this count by 1:
      switchcount ++;      
    } else {
      /*If no switching has been done AND the direction is &quot;asc&quot;,
      set the direction to &quot;desc&quot; and run the while loop again.*/
      if (switchcount == 0 &amp;&amp; dir == &quot;desc&quot;) {
        dir = &quot;asc&quot;;
        switching = true;
      }
    }
  }
}

function sortTableNumber2(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById(&quot;myTable2&quot;);
  switching = true;
  //Set the sorting direction to ascending:
  dir = &quot;desc&quot;; 
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i &lt; (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].getElementsByTagName(&quot;TD&quot;)[n];
      y = rows[i + 1].getElementsByTagName(&quot;TD&quot;)[n];
      /*check if the two rows should switch place,
      based on the direction, asc or desc:*/
      if (dir == &quot;asc&quot;) {
        if (Number(x.innerHTML) &gt; Number(y.innerHTML)) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      } else if (dir == &quot;desc&quot;) {
        if (Number(x.innerHTML) &lt; Number(y.innerHTML)) {
          //if so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      //Each time a switch is done, increase this count by 1:
      switchcount ++;      
    } else {
      /*If no switching has been done AND the direction is &quot;asc&quot;,
      set the direction to &quot;desc&quot; and run the while loop again.*/
      if (switchcount == 0 &amp;&amp; dir == &quot;desc&quot;) {
        dir = &quot;asc&quot;;
        switching = true;
      }
    }
  }
}
&lt;/script&gt;

&lt;p&gt;So if the &lt;a href=&quot;https://fivethirtyeight.com/features/the-suburbs-all-kinds-of-suburbs-delivered-the-house-to-democrats/&quot;&gt;suburbs were what handed Democrats the House in 2018&lt;/a&gt;, the Douglas County portion of CO-6 should be exhibit A. Obviously, part of Jason Crow’s success in this area was regression to the mean – it was already so red that there was really nowhere to go but up – but it even stands out when comparing apples to apples. Out of the the top ten districts most similar to CO-6 according to &lt;a href=&quot;https://fivethirtyeight.com/methodology/how-fivethirtyeights-house-and-senate-models-work/&quot;&gt;FiveThirtyEight’s similarity metrics&lt;/a&gt;, three were held by a Republican before the midterms. All three seats flipped to Democrats, but in terms of gain in vote margin, CO-6 just barely finishes second to Kansas’s 3rd district (KS-3) by only 0.3%. In fact, the comparison between Jason Crow’s victory and &lt;a href=&quot;https://projects.fivethirtyeight.com/2018-midterm-election-forecast/house/kansas/3/&quot;&gt;Sharice Davids’ victory in KS-3&lt;/a&gt; is actually rather fitting. In the primaries, Davids’ defeated a Bernie-Sanders-endorsed candidate to move on to the general election, possibly suggesting a desire for moderate candidates in KS-3 similar to CO-6. And while the storyline of a gay Native American MMA-fighter candidate will generate more national attention than yet another white male running for congress, the energy levels behind both campaigns in historically red districts seem reminiscent of each other. Both benefitted from early grass roots organizing by neighborhood volunteers refusing to accept the status quo.&lt;/p&gt;

&lt;h3&gt; Demographically, Geographically, and Politically Similar Districts to CO-6&lt;/h3&gt;
&lt;table id=&quot;myTable3&quot;&gt;
  &lt;tr height=&quot;50&quot;&gt;
   &lt;!--When a header is clicked, run the sortTable function, with a parameter, 0 for sorting by names, 1 for sorting by country:--&gt;  
    &lt;th onclick=&quot;sortTable3(0)&quot;&gt;District&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber3(1)&quot;&gt;2016 Margin of Defeat (%)&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber3(2)&quot;&gt;2018 Margin of Victory (%)&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber3(3)&quot;&gt;Democratic Gain (%)&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;CO-6&lt;/td&gt;
    &lt;td&gt;8.3&lt;/td&gt;
    &lt;td&gt;11.2&lt;/td&gt;
    &lt;td&gt;19.5&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;CA-49&lt;/td&gt;
    &lt;td&gt;0.5&lt;/td&gt;
    &lt;td&gt;7.4&lt;/td&gt;
    &lt;td&gt;7.9&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;CA-25&lt;/td&gt;
    &lt;td&gt;6.3&lt;/td&gt;
    &lt;td&gt;6.4&lt;/td&gt;
    &lt;td&gt;12.7&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;KS-3&lt;/td&gt;
    &lt;td&gt;10.7&lt;/td&gt;
    &lt;td&gt;9.1&lt;/td&gt;
    &lt;td&gt;19.8&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;script&gt;
function sortTable3(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById(&quot;myTable3&quot;);
  switching = true;
  //Set the sorting direction to ascending:
  dir = &quot;desc&quot;; 
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i &lt; (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].getElementsByTagName(&quot;TD&quot;)[n];
      y = rows[i + 1].getElementsByTagName(&quot;TD&quot;)[n];
      /*check if the two rows should switch place,
      based on the direction, asc or desc:*/
      if (dir == &quot;asc&quot;) {
        if (x.innerHTML.toLowerCase() &gt; y.innerHTML.toLowerCase()) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      } else if (dir == &quot;desc&quot;) {
        if (x.innerHTML.toLowerCase() &lt; y.innerHTML.toLowerCase()) {
          //if so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      //Each time a switch is done, increase this count by 1:
      switchcount ++;      
    } else {
      /*If no switching has been done AND the direction is &quot;asc&quot;,
      set the direction to &quot;desc&quot; and run the while loop again.*/
      if (switchcount == 0 &amp;&amp; dir == &quot;desc&quot;) {
        dir = &quot;asc&quot;;
        switching = true;
      }
    }
  }
}

function sortTableNumber3(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById(&quot;myTable3&quot;);
  switching = true;
  //Set the sorting direction to ascending:
  dir = &quot;desc&quot;; 
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i &lt; (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].getElementsByTagName(&quot;TD&quot;)[n];
      y = rows[i + 1].getElementsByTagName(&quot;TD&quot;)[n];
      /*check if the two rows should switch place,
      based on the direction, asc or desc:*/
      if (dir == &quot;asc&quot;) {
        if (Number(x.innerHTML) &gt; Number(y.innerHTML)) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      } else if (dir == &quot;desc&quot;) {
        if (Number(x.innerHTML) &lt; Number(y.innerHTML)) {
          //if so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      //Each time a switch is done, increase this count by 1:
      switchcount ++;      
    } else {
      /*If no switching has been done AND the direction is &quot;asc&quot;,
      set the direction to &quot;desc&quot; and run the while loop again.*/
      if (switchcount == 0 &amp;&amp; dir == &quot;desc&quot;) {
        dir = &quot;asc&quot;;
        switching = true;
      }
    }
  }
}
&lt;/script&gt;

&lt;p&gt;Two and a half weeks of door-knocking, organizing, and getting out the vote felt far more like two and a half months. It would normally be difficult to imagine how people would have survived the entire campaign, but the energy and passion for change of the volunteers that came to make a difference had to have something to do with it. There’s no way you make it through an entire campaign without neighborhood leaders like Darien and Kathy, without expert phone-bankers like Connie, without unstoppable doorknockers like Brian and Sam, and without energy boosts from seasoned campaign veterans like my partner, Ashley (of course I was going to shamelessly brag about my wife at some point during this article). Jason Crow and his team ran a hell of a campaign, but if there’s anyone to credit with this win, it’s the citizens of Colorado’s 6th district that gave their time, sweat, and effort to the idea that change can materialize anywhere. More than anything, that is what it takes to turn red into purple.&lt;/p&gt;

&lt;h6&gt;All election results presented here are unofficial as of November 23rd, 2018 and a spreadsheet containing all relevant data is available &lt;a href=&quot;https://github.com/tefirman/StatisticalStumbles/blob/master/DouglasCounty_AllResults.xlsx&quot;&gt;here&lt;/a&gt; on &lt;a href=&quot;https://github.com/tefirman&quot;&gt;my GitHub page&lt;/a&gt;.







&lt;/h6&gt;</content><summary type="html">Colorado's 6th Congressional District is a perfect example of why every turf matters...</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/images/DougCoPurple.png" /></entry></feed>
