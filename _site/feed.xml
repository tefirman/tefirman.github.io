<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.2.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2019-04-07T13:05:51-06:00</updated><id>/</id><title type="html">Taylor Firman</title><subtitle>Just a repository for the occasional statistical stumble...</subtitle><entry><title type="html">Uneven Democracy</title><link href="/blog/UnequalRepresentation/" rel="alternate" type="text/html" title="Uneven Democracy" /><published>2019-02-22T00:00:00-07:00</published><updated>2019-02-22T00:00:00-07:00</updated><id>/blog/UnequalRepresentation</id><content type="html" xml:base="/blog/UnequalRepresentation/">&lt;head&gt;
&lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot; /&gt;
&lt;meta name=&quot;twitter:creator&quot; content=&quot;@tefirman51&quot; /&gt;
&lt;meta name=&quot;twitter:site&quot; content=&quot;@tefirman51&quot; /&gt;
&lt;meta name=&quot;twitter:title&quot; content=&quot;Uneven Democracy&quot; /&gt;
&lt;meta name=&quot;twitter:description&quot; content=&quot;Not all votes are created equal...&quot; /&gt;
&lt;meta name=&quot;twitter:image:src&quot; content=&quot;https://tefirman.github.io/images/TippedScales.png&quot; /&gt;
&lt;meta name=&quot;twitter:image:width&quot; content=&quot;280&quot; /&gt;
&lt;meta name=&quot;twitter:image:height&quot; content=&quot;150&quot; /&gt;
&lt;script src=&quot;/assets/js/jquery.min.js&quot;&gt;&lt;/script&gt; 
&lt;script&gt; 
$(function(){
  $(&quot;#includedContent&quot;).load(&quot;/images/HouseSenateResultsByYear.html&quot;); 
});
&lt;/script&gt; 
&lt;script&gt; 
$(function(){
  $(&quot;#includedContent2&quot;).load(&quot;/images/HouseSenateResultsByYear_Alternates.html&quot;); 
});
&lt;/script&gt; 
&lt;/head&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML&quot; async=&quot;&quot;&gt;&lt;/script&gt;

&lt;p&gt;Americans pride themselves on their democracy, on the idea that everyone has an equal voice in our government, and to be honest, I’m pretty proud of it too (less so in recent years). But if anyone tells you that every citizen truly has an &lt;i&gt;equal&lt;/i&gt; voice in our system, they possess one of two things: 1. a misunderstanding of how our government is designed and operated, or 2. a loose definition of the term “equal”. In an ideal scenario, each person’s voice would be equally valued and political representation on a macroscopic level would be proportional to the views of the American public. As a simple example, a group of 1800 Democrats and 1200 Republicans could be represented by 9 Democrats and 6 Republicans, giving each voter a representative power of 1/200 or 0.005. But let’s say that a neighboring group of 900 Republicans and 600 Democrats was represented by 9 Republicans and 6 Democrats. Locally, this is proportional and fair, but macroscopically, we now have equal representation (15-15) for unequal populations (2400-2100) because the second group has twice the representative power (1/100 or 0.01).&lt;/p&gt;

&lt;p&gt;This may seem like an unrealistic example, but this is basically how the United States Senate has operated since 1789 thanks to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Connecticut_Compromise&quot;&gt;Connecticut Compromise&lt;/a&gt;. Gerrymandering has led to similar (but less extreme) situations in the House of Representatives. To illustrate this, we can calculate the representative power of each state or congressional district by dividing the number of representatives/senators they have by the number of voters who participated. Just to clarify units, we will define a 1 representative to 1 voter ratio as a “rep” which would make 1 representative to 1,000,000 voters a “microrep” or μrep. Furthermore, since there are 435 representatives in the House and 100 in the Senate, we will define “Total Power” as 4.35*(Senate Power) + (House Power). The figures shown here illustrate darker colors as higher representative powers, but if you would like to check out the exact values for each state and district, check them out &lt;a href=&quot;https://github.com/tefirman/StatisticalStumbles/blob/master/ElectionResults/OverallResults_ByYearAndState.csv&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://github.com/tefirman/StatisticalStumbles/blob/master/ElectionResults/OverallResults_ByYearAndDistrict.csv&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image fit&quot;&gt;&lt;img src=&quot;/images/PowerMapsFigure.png&quot; alt=&quot;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Taking a look at the two extremes, we can see a pretty shocking disparity in representation. A voter in Wyoming has more representative power than a Floridian, a Pennsylvanian, a New Yorker, and a Californian &lt;i&gt;combined&lt;/i&gt;. This is purely due to the fact that while each of these five states are represented by two senators, only 400,000 voters pick those two people in Wyoming while over 10,000,000 pick them in each of the other four states. Using state-by-state voter demographics, we can expand the scope of our power metric to compare the average representative power of different demographics to see if any group in particular benefits from this arrangement. Comparisons based on sex and age show fairly similar representation between different groups, but race, political affiliation, and urban/rural delineation produce very unbalanced playing fields. As seen in the tables below, white voters have about 10% more representative power than non-white voters, Republican voters have 28% more than Democratic voters, and rural voters (based on &lt;a href=&quot;https://github.com/theatlantic/citylab-data/blob/master/citylab-congress/citylab_cdi.csv&quot;&gt;CityLab’s classification&lt;/a&gt;) have 40% more than urban voters. This is again due to the disparate proportioning of representatives in the Senate and highlights the inherent representative inequity in our country’s democracy.&lt;/p&gt;

&lt;style&gt;
table {
    border-spacing: 0;
    width: 100%;
    border: 1px solid #ddd;
    line-height: 1
}

th {
    cursor: pointer;
}

th, td {
    text-align: left;
    padding: 0px;
    vertical-align: middle;
    min-height: 1px;
    border-left: 1px solid #ddd;
    border-right: 1px solid #ddd;
}

tr:nth-child(even) {
    background-color: #f2f2f2
}
&lt;/style&gt;

&lt;h3&gt;Representative Power By Race in 2016 (microreps)&lt;/h3&gt;
&lt;table id=&quot;myTable2&quot;&gt;
  &lt;tr height=&quot;50&quot;&gt;
   &lt;!--When a header is clicked, run the sortTable function, with a parameter, 0 for sorting by names, 1 for sorting by country:--&gt;  
    &lt;th onclick=&quot;sortTable2(0)&quot;&gt;Race&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber2(1)&quot;&gt;House Power&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber2(2)&quot;&gt;Senate Power&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber2(3)&quot;&gt;Total Power&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;White&lt;/td&gt;
    &lt;td&gt;3.36&lt;/td&gt;
    &lt;td&gt;0.79&lt;/td&gt;
    &lt;td&gt;6.79&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Black&lt;/td&gt;
    &lt;td&gt;3.40&lt;/td&gt;
    &lt;td&gt;0.65&lt;/td&gt;
    &lt;td&gt;6.25&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Asian&lt;/td&gt;
    &lt;td&gt;3.63&lt;/td&gt;
    &lt;td&gt;0.62&lt;/td&gt;
    &lt;td&gt;6.32&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Hispanic&lt;/td&gt;
    &lt;td&gt;3.61&lt;/td&gt;
    &lt;td&gt;0.49&lt;/td&gt;
    &lt;td&gt;5.76&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;script&gt;
function sortTable2(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById(&quot;myTable2&quot;);
  switching = true;
  //Set the sorting direction to ascending:
  dir = &quot;desc&quot;; 
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i &lt; (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].getElementsByTagName(&quot;TD&quot;)[n];
      y = rows[i + 1].getElementsByTagName(&quot;TD&quot;)[n];
      /*check if the two rows should switch place,
      based on the direction, asc or desc:*/
      if (dir == &quot;asc&quot;) {
        if (x.innerHTML.toLowerCase() &gt; y.innerHTML.toLowerCase()) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      } else if (dir == &quot;desc&quot;) {
        if (x.innerHTML.toLowerCase() &lt; y.innerHTML.toLowerCase()) {
          //if so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      //Each time a switch is done, increase this count by 1:
      switchcount ++;      
    } else {
      /*If no switching has been done AND the direction is &quot;asc&quot;,
      set the direction to &quot;desc&quot; and run the while loop again.*/
      if (switchcount == 0 &amp;&amp; dir == &quot;desc&quot;) {
        dir = &quot;asc&quot;;
        switching = true;
      }
    }
  }
}

function sortTableNumber2(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById(&quot;myTable2&quot;);
  switching = true;
  //Set the sorting direction to ascending:
  dir = &quot;desc&quot;; 
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i &lt; (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].getElementsByTagName(&quot;TD&quot;)[n];
      y = rows[i + 1].getElementsByTagName(&quot;TD&quot;)[n];
      /*check if the two rows should switch place,
      based on the direction, asc or desc:*/
      if (dir == &quot;asc&quot;) {
        if (Number(x.innerHTML) &gt; Number(y.innerHTML)) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      } else if (dir == &quot;desc&quot;) {
        if (Number(x.innerHTML) &lt; Number(y.innerHTML)) {
          //if so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      //Each time a switch is done, increase this count by 1:
      switchcount ++;      
    } else {
      /*If no switching has been done AND the direction is &quot;asc&quot;,
      set the direction to &quot;desc&quot; and run the while loop again.*/
      if (switchcount == 0 &amp;&amp; dir == &quot;desc&quot;) {
        dir = &quot;asc&quot;;
        switching = true;
      }
    }
  }
}
&lt;/script&gt;

&lt;h3&gt; Representative Power By Political Party in 2016 (microreps)&lt;/h3&gt;
&lt;table id=&quot;myTable3&quot;&gt;
  &lt;tr height=&quot;50&quot;&gt;
   &lt;!--When a header is clicked, run the sortTable function, with a parameter, 0 for sorting by names, 1 for sorting by country:--&gt;  
    &lt;th onclick=&quot;sortTable3(0)&quot;&gt;Party&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber3(1)&quot;&gt;House Power&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber3(2)&quot;&gt;Senate Power&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber3(3)&quot;&gt;Total Power&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Republican&lt;/td&gt;
    &lt;td&gt;3.85&lt;/td&gt;
    &lt;td&gt;1.00&lt;/td&gt;
    &lt;td&gt;8.19&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Democratic&lt;/td&gt;
    &lt;td&gt;3.16&lt;/td&gt;
    &lt;td&gt;0.74&lt;/td&gt;
    &lt;td&gt;6.39&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Other&lt;/td&gt;
    &lt;td&gt;0.00&lt;/td&gt;
    &lt;td&gt;0.43&lt;/td&gt;
    &lt;td&gt;1.88&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;script&gt;
function sortTable3(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById(&quot;myTable3&quot;);
  switching = true;
  //Set the sorting direction to ascending:
  dir = &quot;desc&quot;; 
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i &lt; (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].getElementsByTagName(&quot;TD&quot;)[n];
      y = rows[i + 1].getElementsByTagName(&quot;TD&quot;)[n];
      /*check if the two rows should switch place,
      based on the direction, asc or desc:*/
      if (dir == &quot;asc&quot;) {
        if (x.innerHTML.toLowerCase() &gt; y.innerHTML.toLowerCase()) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      } else if (dir == &quot;desc&quot;) {
        if (x.innerHTML.toLowerCase() &lt; y.innerHTML.toLowerCase()) {
          //if so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      //Each time a switch is done, increase this count by 1:
      switchcount ++;      
    } else {
      /*If no switching has been done AND the direction is &quot;asc&quot;,
      set the direction to &quot;desc&quot; and run the while loop again.*/
      if (switchcount == 0 &amp;&amp; dir == &quot;desc&quot;) {
        dir = &quot;asc&quot;;
        switching = true;
      }
    }
  }
}

function sortTableNumber3(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById(&quot;myTable3&quot;);
  switching = true;
  //Set the sorting direction to ascending:
  dir = &quot;desc&quot;; 
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i &lt; (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].getElementsByTagName(&quot;TD&quot;)[n];
      y = rows[i + 1].getElementsByTagName(&quot;TD&quot;)[n];
      /*check if the two rows should switch place,
      based on the direction, asc or desc:*/
      if (dir == &quot;asc&quot;) {
        if (Number(x.innerHTML) &gt; Number(y.innerHTML)) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      } else if (dir == &quot;desc&quot;) {
        if (Number(x.innerHTML) &lt; Number(y.innerHTML)) {
          //if so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      //Each time a switch is done, increase this count by 1:
      switchcount ++;      
    } else {
      /*If no switching has been done AND the direction is &quot;asc&quot;,
      set the direction to &quot;desc&quot; and run the while loop again.*/
      if (switchcount == 0 &amp;&amp; dir == &quot;desc&quot;) {
        dir = &quot;asc&quot;;
        switching = true;
      }
    }
  }
}
&lt;/script&gt;

&lt;h3&gt; Representative Power By Urban, Suburban, and Rural Classification in 2016 (microreps)&lt;/h3&gt;
&lt;table id=&quot;myTable4&quot;&gt;
  &lt;tr height=&quot;50&quot;&gt;
   &lt;!--When a header is clicked, run the sortTable function, with a parameter, 0 for sorting by names, 1 for sorting by country:--&gt;  
    &lt;th onclick=&quot;sortTable4(0)&quot;&gt;Party&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber4(1)&quot;&gt;House Power&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber4(2)&quot;&gt;Senate Power&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber4(3)&quot;&gt;Total Power&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Rural&lt;/td&gt;
    &lt;td&gt;3.29&lt;/td&gt;
    &lt;td&gt;1.17&lt;/td&gt;
    &lt;td&gt;8.39&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Suburban&lt;/td&gt;
    &lt;td&gt;3.26&lt;/td&gt;
    &lt;td&gt;0.69&lt;/td&gt;
    &lt;td&gt;6.25&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Urban&lt;/td&gt;
    &lt;td&gt;3.90&lt;/td&gt;
    &lt;td&gt;0.48&lt;/td&gt;
    &lt;td&gt;5.97&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;script&gt;
function sortTable4(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById(&quot;myTable4&quot;);
  switching = true;
  //Set the sorting direction to ascending:
  dir = &quot;desc&quot;; 
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i &lt; (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].getElementsByTagName(&quot;TD&quot;)[n];
      y = rows[i + 1].getElementsByTagName(&quot;TD&quot;)[n];
      /*check if the two rows should switch place,
      based on the direction, asc or desc:*/
      if (dir == &quot;asc&quot;) {
        if (x.innerHTML.toLowerCase() &gt; y.innerHTML.toLowerCase()) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      } else if (dir == &quot;desc&quot;) {
        if (x.innerHTML.toLowerCase() &lt; y.innerHTML.toLowerCase()) {
          //if so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      //Each time a switch is done, increase this count by 1:
      switchcount ++;      
    } else {
      /*If no switching has been done AND the direction is &quot;asc&quot;,
      set the direction to &quot;desc&quot; and run the while loop again.*/
      if (switchcount == 0 &amp;&amp; dir == &quot;desc&quot;) {
        dir = &quot;asc&quot;;
        switching = true;
      }
    }
  }
}

function sortTableNumber4(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById(&quot;myTable4&quot;);
  switching = true;
  //Set the sorting direction to ascending:
  dir = &quot;desc&quot;; 
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i &lt; (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].getElementsByTagName(&quot;TD&quot;)[n];
      y = rows[i + 1].getElementsByTagName(&quot;TD&quot;)[n];
      /*check if the two rows should switch place,
      based on the direction, asc or desc:*/
      if (dir == &quot;asc&quot;) {
        if (Number(x.innerHTML) &gt; Number(y.innerHTML)) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      } else if (dir == &quot;desc&quot;) {
        if (Number(x.innerHTML) &lt; Number(y.innerHTML)) {
          //if so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      //Each time a switch is done, increase this count by 1:
      switchcount ++;      
    } else {
      /*If no switching has been done AND the direction is &quot;asc&quot;,
      set the direction to &quot;desc&quot; and run the while loop again.*/
      if (switchcount == 0 &amp;&amp; dir == &quot;desc&quot;) {
        dir = &quot;asc&quot;;
        switching = true;
      }
    }
  }
}
&lt;/script&gt;

&lt;p&gt;On a macroscopic scale, this leads to representation that is disproportionate to the actual populations they represent. Look at the percentages of elected congressional representatives in each party compared to the number of voters who actually voted for that party shown in the first figure below. Wins and votes in the House of Representatives have generally been proportional because the number of representatives is allocated based on population – until 2010 that is when congressional districts were conveniently redrawn by state governments. Can we talk about 2012 please? Democrats received more votes in aggregate during that election and only received 45% of the delegates. The equivalent graph applied to the Senate is even worse. For each year, we can add up the vote totals for each senator’s most recent election (e.g. for 2016, a senator elected in 2014 would contribute their 2014 vote totals) and again compare votes by party to wins by party. As you can see in the second figure, the relationship between these two values is loose at best. Since 2004, the percentage of votes cast for Republican candidates has never exceeded that of Democratic candidates, and yet, four of the seven congresses have had as many or more Republican Senators as Democratic Senators. That doesn’t exactly seem fair to me…&lt;/p&gt;

&lt;div id=&quot;includedContent&quot;&gt;&lt;/div&gt;

&lt;p&gt;So what does this imbalance of representative power lead to? Unpopular ideas becoming law and popular ideas getting ignored. Despite being &lt;a href=&quot;https://www.washingtonpost.com/news/the-fix/wp/2017/07/28/republicans-obamacare-repeal-was-never-really-that-popular/?utm_term=.3e02025c1297&quot;&gt;very unpopular amongst the general public&lt;/a&gt;, the attempted “skinny repeal” of Obamacare in 2017 almost passed in the Senate with votes from Senators representing only 39.8% of American voters, and it would have, were it not for the dramatic thumbs down of the late Senator John McCain. What did become law was the 2017 Tax Cuts and Jobs Act, &lt;a href=&quot;https://news.gallup.com/poll/243611/disapprove-approve-2017-tax-cuts.aspx&quot;&gt;another unpopular bill&lt;/a&gt; which only needed the votes from Senators representing 40.2% of the electorate. The Supreme Court confirmations of both Neil Gorsuch and Brett Kavanaugh were pushed through by Senators elected by less than 42% of the electorate. Even ignoring actual politics, it’s counterintuitive that such a diverse country would elect congress after congress of old white dudes rather than the melting pot that America so eagerly describes itself as.&lt;/p&gt;

&lt;p&gt;So why does this happen and what can we do to fix it? &lt;a href=&quot;http://www.pewresearch.org/fact-tank/2018/05/21/u-s-voter-turnout-trails-most-developed-countries/&quot;&gt;Low voter turnout&lt;/a&gt; is a big factor that tends to benefit conservative candidates, which possibly explains why Republicans have received disproportionately higher representation since 2010. The 2018 midterms did show a &lt;a href=&quot;https://fivethirtyeight.com/features/the-2018-midterms-in-4-charts/&quot;&gt;huge surge in turnout&lt;/a&gt; but I can’t help but wonder if this is purely a reaction to outrage against President Trump that will quickly fade in future elections. &lt;a href=&quot;https://www.pbs.org/newshour/politics/georgia-election-fight-shows-that-black-voter-suppression-a-southern-tradition-still-flourishes&quot;&gt;Voter suppression&lt;/a&gt; continues to rear its ugly head, though often masquerading as concerns for &lt;a href=&quot;https://www.theatlantic.com/politics/archive/2018/11/how-voter-suppression-actually-works/575035/&quot;&gt;“voter fraud”&lt;/a&gt;. Encouraging those around us to get involved in democracy and protecting the voting rights of every American citizen will help to align the voices of power with the voice of the people. But the more data-centric problem I want to address is gerrymandering and the restructuring of Congress. The exact geometry of congressional districts is a very complicated issue, so I won’t get into that level of detail here (though a future post might), but there might be a simpler solution. For those of you who think I’m trying to rewrite the Constitution, take a chill pill, this is just a thought experiment.&lt;/p&gt;

&lt;p&gt;Let’s imagine a scenario where no districts are drawn. In this scenario, everyone still gets two Senators and the same amount of representatives in the House as before, but rather than voting in individual races, each person votes for a particular party (obviously this is problematic since people’s views don’t always align with any single party, but bear with me). Representatives and Senators are then divvied out to each party relative to the votes for each party. As you can see in the first two figures below, this setup compensates for most of the mismatch between votes and representation in the House, but the Senate remains inequitable. At least now the number of Senators for each party is proportional to the vote share, but Republican votes still go much further than Democratic ones. In fact, after trying a few different iterations of this model, the only version that produces a Senate that somewhat accurately represents the votes of the people (as seen in the third figure below) is when Senators are reapportioned based on census populations, the number of Senators is increased to 150, and people again vote for a party instead of a candidate. Crazy how far you need to go just to produce a level playing field…&lt;/p&gt;

&lt;div id=&quot;includedContent2&quot;&gt;&lt;/div&gt;

&lt;p&gt;I realize that the founding fathers established our government this way for a reason, that the Connecticut Compromise was necessary to get smaller states to ratify the Constitution, and that, like the Electoral College, it helps to guard against the &lt;a href=&quot;https://en.wikipedia.org/wiki/Tyranny_of_the_majority&quot;&gt;tyranny of the majority&lt;/a&gt;. But right now, it feels a hell of a lot like we’re at risk of the opposite. A congressional majority elected by a minority of Americans is enabling an unpopular president (also elected by a minority of Americans) to enact legislation opposed by a majority of Americans. The framers were very intentional in their preambular word choice of forming a &lt;i&gt;more perfect&lt;/i&gt; union, implying a good start but plenty of room to improve. Maybe it’s time to start thinking about making Congress a bit more perfect in terms of representation.&lt;/p&gt;

&lt;h6&gt;All statistics presented here were calculated using &lt;a href=&quot;https://transition.fec.gov/pubrec/electionresults.shtml&quot;&gt;official election results from the FEC&lt;/a&gt;. The &lt;a href=&quot;https://github.com/tefirman/StatisticalStumbles/tree/master/ElectionResults&quot;&gt;relevant data&lt;/a&gt; and &lt;a href=&quot;https://github.com/tefirman/StatisticalStumbles/blob/master/ElectionResults.py&quot;&gt;python code&lt;/a&gt; used to calculate them are available on &lt;a href=&quot;https://github.com/tefirman&quot;&gt;my GitHub page&lt;/a&gt;.








&lt;/h6&gt;</content><summary type="html">Based on how the American government was designed, not all votes are created equal...</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/images/TippedScales.png" /></entry><entry><title type="html">Riddler Answer: Printers are from Mars, Scanners are from Venus</title><link href="/blog/MartianPrinter/" rel="alternate" type="text/html" title="Riddler Answer: Printers are from Mars, Scanners are from Venus" /><published>2019-01-14T00:00:00-07:00</published><updated>2019-01-14T00:00:00-07:00</updated><id>/blog/MartianPrinter</id><content type="html" xml:base="/blog/MartianPrinter/">&lt;head&gt;
&lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot; /&gt;
&lt;meta name=&quot;twitter:creator&quot; content=&quot;@tefirman51&quot; /&gt;
&lt;meta name=&quot;twitter:site&quot; content=&quot;@tefirman51&quot; /&gt;
&lt;meta name=&quot;twitter:title&quot; content=&quot;Riddler Answer: Printers are from Mars, Scanners are from Venus&quot; /&gt;
&lt;meta name=&quot;twitter:description&quot; content=&quot;Captain Blondebeard would be so proud...&quot; /&gt;
&lt;meta name=&quot;twitter:image:src&quot; content=&quot;https://tefirman.github.io/images/Mars.jpg&quot; /&gt;
&lt;meta name=&quot;twitter:image:width&quot; content=&quot;280&quot; /&gt;
&lt;meta name=&quot;twitter:image:height&quot; content=&quot;150&quot; /&gt;
&lt;/head&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML&quot; async=&quot;&quot;&gt;&lt;/script&gt;

&lt;p&gt;This week’s &lt;a href=&quot;https://fivethirtyeight.com/features/in-space-no-one-can-hear-your-3d-printer-die/&quot;&gt;edition&lt;/a&gt; of the Riddler from Jerry Myers takes us to our rusty planetary neighbor and asks us to calculate the odds of our survival based on three (fairly unreliable) 3D printers. With Mars being a harsh environment, a vital piece of equipment will break exactly once per day and one of the printers must print a replacement part. However, each printer can only print one piece per day and they each have a 10%, 7.5%, and 5% chance respectively of breaking each day. Based on this less than ideal scenario, what are the odds that you would survive a 1825 day long journey?&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;If I understand the description of the scenario correctly, the only way you would die is if all three printers break in the same day because all other scenarios are fixable. For instance, if printers A and B both fail, printer C can print a part to fix printer B, printer B can then print a piece to fix printer A, and finally, printer A can then print a new part for the vital equipment. By this logic, the probability of surviving the entire journey would be&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P = (100\% - 10\% * 7.5\% * 5\%)^{1825} = 50.4\%.&lt;/script&gt;

&lt;p&gt;However, the problem gets much more interesting if we make it a bit more realistic. Specifically, we can make the vital equipment/printer failures a random process using a &lt;a href=&quot;https://en.wikipedia.org/wiki/Gillespie_algorithm&quot;&gt;Gillespie algorithm&lt;/a&gt; like the one shown below. On average, one piece of vital equipment will still break each day and each printer will have the same odds of breaking each day, but there is now a significant chance of having multiple breakages in a single day. When anything breaks, the next available printer will print a replacement but then remain unavailable for the next 24 hours to recharge.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import numpy as np

printerLag = 1.0 # Number of days before a printer is ready to print again
numDays = 1825 # Number of days in your martian adventure
printerRates = np.array([0.05,0.075,0.1]) # Probabilities of each printer breaking
vitalRate = 1.0 # Rate at which vital equipment breaks (measured in malfunctions per day)
numSims = 10000 # Number of simulations to run before averaging

times = []
for numSim in range(numSims):
    if (numSim + 1)%1000 == 0:
        print('Try #' + str(numSim + 1))
    time = 0.0
    printers = np.ones(len(printerRates)) # 1 if operational, 0 if broken
    lastPrint = -1*np.ones(len(printerRates)) # Time of each printer's last print job
    while time &amp;lt; numDays:
        probs = np.append(printerRates*printers,vitalRate)
        overallRate = sum(probs)
        randNum1 = np.random.rand(1)[0]
        time -= np.log(randNum1)/overallRate
        probs = probs/overallRate
        randNum2 = np.random.rand(1)[0]
        while np.any(printers == 0) and np.sum(np.all([printers == 1,time - lastPrint &amp;gt;= printerLag],axis=0)) &amp;gt; 0:
            fixInd = np.where(printers == 0)[0][-1]
            printInd = np.where(np.all([printers == 1,time - lastPrint &amp;gt;= printerLag],axis=0))[0][0]
            printers[fixInd] = 1
            lastPrint[printInd] += 1
            del fixInd
            del printInd
        ind = np.where([randNum2 &amp;lt;= sum(probs[:ind + 1]) for ind in range(len(probs))])[0][0]
        if ind &amp;lt; len(printers):
            printers[ind] = 0
            if np.sum(np.all([printers == 1,time - lastPrint &amp;gt;= printerLag],axis=0)) &amp;gt; 0:
                printInd = np.where(np.all([printers == 1,time - lastPrint &amp;gt;= printerLag],axis=0))[0][0]
                lastPrint[printInd] = time
                printers[ind] = 1
                del printInd
        else:
            if np.any(np.all([printers == 1,time - lastPrint &amp;gt;= printerLag],axis=0)):
                printInd = np.where(np.all([printers == 1,time - lastPrint &amp;gt;= printerLag],axis=0))[0][0]
                lastPrint[printInd] = time
                del printInd
            else:
                break
        del ind
    times.append(time)
del numSim

print('Average Survival Time = ' + str(round(np.average(times),1)) + \
' +/- ' + str(round(np.std(times),1)) + ' days')
print('Probability of Survival = ' + str(round(100*sum(np.array(times) &amp;gt;= numDays)/len(times),1)) + '%')
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;/images/SurvivalProb.png&quot; alt=&quot;&quot; /&gt;&lt;img src=&quot;/images/SurvivalProbability_NumPrinters.png&quot; alt=&quot;&quot; /&gt;&lt;img src=&quot;/images/SurvivalProbability_PrinterLag.png&quot; alt=&quot;&quot; /&gt;&lt;/span&gt;This added stochasticity changes the entire game. We intrepid Riddler-nauts now have essentially a zero percent chance of surviving our martian journey with an average survival of &lt;script type=&quot;math/tex&quot;&gt;13.2 \pm 12.6&lt;/script&gt; days. So what needs to change??? What do our highly-skilled RASA engineers need to focus on to get us to the 1825 day finish line? For starters, let’s pretend that the &lt;a href=&quot;https://fivethirtyeight.com/features/how-far-would-you-go-to-rig-a-coin-flip/&quot;&gt;Riddler Nation Senate&lt;/a&gt; decided to approve funding for as many 5% printers as we need to have a 50% chance of survival (man, those senators love their coin flips). If that were the case, we would need seven printers instead of three, as seen in the second figure. But with &lt;a href=&quot;http://www.realclearfuture.com/articles/2017/06/01/elon_musk_is_still_the_king_of_low-cost_space_launch_111957.html&quot;&gt;space travel costing $1250 per pound at best&lt;/a&gt;, each &lt;a href=&quot;https://www.homedepot.com/p/Dremel-Digilab-3D45-Advanced-Idea-Builder-3D-Printer-with-Built-In-WiFi-Guided-Leveling-and-RFID-Filament-Recognition-3D45-01/303720938?cm_mmc=Shopping%7CG%7CVF%7CD25T%7C25-9_PORTABLE+POWER%7CDREMEL%7CNA%7CVersa%7c71700000037187511%7c58700004135694341%7c92700034455553438&amp;amp;gclid=EAIaIQobChMIrqDZuYLv3wIVdx-tBh1yhQN-EAQYBCABEgKaqvD_BwE&amp;amp;gclsrc=aw.ds&quot;&gt;printer&lt;/a&gt; weighing 50 pounds, and each printer costing $1500, the senators are starting to clamor about the extra $256K. Instead, they are encouraging us to optimize the three printers we already have. In the end, lowering the breaking probability of our printers won’t help much – even if the printers never break, it’s reasonably probable for more than three pieces of vital machinery to break in a single day and the lag between printing jobs will do us in. Sure enough, simulating this perfect-printer scenario produces an average survival of &lt;script type=&quot;math/tex&quot;&gt;20.5 \pm 20.0&lt;/script&gt; days so we should definitely focus on reducing the rate-limiting 24 hour recharging period. In order to reach the 50% goal set by the Senate with our original three printers, we would need to lower the lag time to just under 3 hours as seen in the final figure.&lt;/p&gt;

&lt;p&gt;This problem is a perfect example of how deterministic, average-based methods can sometimes be misrepresentative of the real scenario. These simpler methods told us that we had a fighting chance, but let’s be honest, malfunctions aren’t going to happen like clockwork. Only by accounting for the randomness and noise of the stochastic processes of the real world do we realize that something needs to change or we’re going to end up as martian toast. If anyone in Riddler Nation wants to mess around with the simulation or see if a different strategy would be more effective, the underlying code is available &lt;a href=&quot;https://github.com/tefirman/RiddlerCode/blob/master/MartianPrinters.py&quot;&gt;here&lt;/a&gt;. Safe travels, Riddler-nauts!!!&lt;/p&gt;</content><summary type="html">Captain Blondebeard would be so proud...</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/images/Mars.jpg" /></entry><entry><title type="html">When Red Becomes Purple</title><link href="/blog/DougCoRecap/" rel="alternate" type="text/html" title="When Red Becomes Purple" /><published>2018-11-23T00:00:00-07:00</published><updated>2018-11-23T00:00:00-07:00</updated><id>/blog/DougCoRecap</id><content type="html" xml:base="/blog/DougCoRecap/">&lt;head&gt;
&lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot; /&gt;
&lt;meta name=&quot;twitter:creator&quot; content=&quot;@tefirman51&quot; /&gt;
&lt;meta name=&quot;twitter:site&quot; content=&quot;@tefirman51&quot; /&gt;
&lt;meta name=&quot;twitter:title&quot; content=&quot;When Red Becomes Purple&quot; /&gt;
&lt;meta name=&quot;twitter:description&quot; content=&quot;Colorado's 6th Congressional District is a perfect example of why every turf matters...&quot; /&gt;
&lt;meta name=&quot;twitter:image:src&quot; content=&quot;https://tefirman.github.io/images/DougCoPurple.png&quot; /&gt;
&lt;meta name=&quot;twitter:image:width&quot; content=&quot;280&quot; /&gt;
&lt;meta name=&quot;twitter:image:height&quot; content=&quot;150&quot; /&gt;
&lt;/head&gt;

&lt;p&gt;Canvassing in any scenario is uncomfortable. Canvassing for a Democratic candidate in a historically Republican district is panic-attack-inducing. But in any campaign, it’s a necessary component. So when my partner and I began volunteering for the Douglas County portion of Jason Crow’s congressional campaign in Colorado’s 6th district (CO-6), it seemed like a daunting but worthy challenge. Given the chaotic state of our democracy, a little more is required of average Americans. We are called to endure the occasional door slam to find the few individuals who remain undecided, who aren’t sure where to vote, who need a little extra motivation to even vote at all. We are called to tolerate the surly “leave me alone”’s to ensure that the voice of every citizen is heard in our society.&lt;/p&gt;

&lt;p&gt;These efforts were particularly necessary in the region that we were assigned by the Crow campaign. In the &lt;a href=&quot;https://www.douglas.co.us/elections/historical-election-data/&quot;&gt;three previous House races in Douglas County&lt;/a&gt;, Democrats have won exactly zero precincts and lost by an average of more than 26 percentage points. With this level of incumbency advantage, we had our work cut out for us, but other indicators left a whiff of possibility in the air. Unprecedented &lt;a href=&quot;https://www.opensecrets.org/overview/&quot;&gt;individual contribution levels&lt;/a&gt; of Democrats across the country (including &lt;a href=&quot;https://www.opensecrets.org/races/candidates?cycle=2018&amp;amp;id=CO06&amp;amp;spec=N&quot;&gt;this one&lt;/a&gt;) provided a significant advantage and could have suggested a grass roots mobilization of previously silent Democrats across the country. Midterm elections are &lt;a href=&quot;https://fivethirtyeight.com/features/trumps-approval-rating-is-up-republican-house-chances-are-down-does-that-make-any-sense/&quot;&gt;always difficult for the party controlling the White House&lt;/a&gt;, and with the &lt;a href=&quot;https://projects.fivethirtyeight.com/trump-approval-ratings/?ex_cid=rrpromo&quot;&gt;considerable unpopularity of President Trump&lt;/a&gt;, the fact that the Republican incumbent Mike Coffman &lt;a href=&quot;https://projects.fivethirtyeight.com/congress-trump-score/mike-coffman/&quot;&gt;voted with Trump 96% of the time&lt;/a&gt; was a major selling point to independent voters. And having a moderate candidate with a military background as an Army Ranger and a progressive stance on gun violence in a region deeply effected by several tragic shootings in recent years would definitely make a difference. So in the days leading up to the election, when Jason Crow’s aides would jokingly ask “you gonna win us DougCo?”, I understood the sarcasm but confidently replied, “we’ll win a few precincts for sure.”&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;/images/DougCoHistory.png&quot; alt=&quot;&quot; /&gt;&lt;/span&gt;As results came pouring in, this prediction turned out to be an understatement. Jason Crow went on to take thirteen precincts in Douglas County and only lost the county by six percentage points. Losing in any fashion may not sound like an uplifting fact, but the 22.0% jump from losing by 27.9% in 2016 to only 5.9% in 2018 is the largest gain out of all the counties in the district (Adams: 16.4%, Arapahoe: 19.8%).&lt;/p&gt;

&lt;style&gt;
table {
    border-spacing: 0;
    width: 100%;
    border: 1px solid #ddd;
    line-height: 1
}

th {
    cursor: pointer;
}

th, td {
    text-align: left;
    padding: 0px;
    vertical-align: middle;
    min-height: 1px;
    border-left: 1px solid #ddd;
    border-right: 1px solid #ddd;
}

tr:nth-child(even) {
    background-color: #f2f2f2
}
&lt;/style&gt;

&lt;h3&gt;Recent House Races in the DougCo Portion of CO-6&lt;/h3&gt;
&lt;table id=&quot;myTable&quot;&gt;
  &lt;tr height=&quot;50&quot;&gt;
   &lt;!--When a header is clicked, run the sortTable function, with a parameter, 0 for sorting by names, 1 for sorting by country:--&gt;  
    &lt;th onclick=&quot;sortTableNumber(0)&quot;&gt;Year&lt;/th&gt;
    &lt;th onclick=&quot;sortTable(1)&quot;&gt;Dem. Candidate&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber(2)&quot;&gt;Vote %&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber(3)&quot;&gt;Margin of Defeat (%)&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber(4)&quot;&gt;Precincts Won&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;2012&lt;/td&gt;
    &lt;td&gt;Joe Miklosi&lt;/td&gt;
    &lt;td&gt;35.4&lt;/td&gt;
    &lt;td&gt;24.7&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;2014&lt;/td&gt;
    &lt;td&gt;Andrew Romanoff&lt;/td&gt;
    &lt;td&gt;34.5&lt;/td&gt;
    &lt;td&gt;27.5&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;2016&lt;/td&gt;
    &lt;td&gt;Morgan Carroll&lt;/td&gt;
    &lt;td&gt;33.3&lt;/td&gt;
    &lt;td&gt;27.9&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;2018&lt;/td&gt;
    &lt;td&gt;Jason Crow&lt;/td&gt;
    &lt;td&gt;45.8&lt;/td&gt;
    &lt;td&gt;5.9&lt;/td&gt;
    &lt;td&gt;13&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;script&gt;
function sortTable(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById(&quot;myTable&quot;);
  switching = true;
  //Set the sorting direction to ascending:
  dir = &quot;desc&quot;; 
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i &lt; (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].getElementsByTagName(&quot;TD&quot;)[n];
      y = rows[i + 1].getElementsByTagName(&quot;TD&quot;)[n];
      /*check if the two rows should switch place,
      based on the direction, asc or desc:*/
      if (dir == &quot;asc&quot;) {
        if (x.innerHTML.toLowerCase() &gt; y.innerHTML.toLowerCase()) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      } else if (dir == &quot;desc&quot;) {
        if (x.innerHTML.toLowerCase() &lt; y.innerHTML.toLowerCase()) {
          //if so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      //Each time a switch is done, increase this count by 1:
      switchcount ++;      
    } else {
      /*If no switching has been done AND the direction is &quot;asc&quot;,
      set the direction to &quot;desc&quot; and run the while loop again.*/
      if (switchcount == 0 &amp;&amp; dir == &quot;desc&quot;) {
        dir = &quot;asc&quot;;
        switching = true;
      }
    }
  }
}

function sortTableNumber(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById(&quot;myTable&quot;);
  switching = true;
  //Set the sorting direction to ascending:
  dir = &quot;desc&quot;; 
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i &lt; (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].getElementsByTagName(&quot;TD&quot;)[n];
      y = rows[i + 1].getElementsByTagName(&quot;TD&quot;)[n];
      /*check if the two rows should switch place,
      based on the direction, asc or desc:*/
      if (dir == &quot;asc&quot;) {
        if (Number(x.innerHTML) &gt; Number(y.innerHTML)) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      } else if (dir == &quot;desc&quot;) {
        if (Number(x.innerHTML) &lt; Number(y.innerHTML)) {
          //if so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      //Each time a switch is done, increase this count by 1:
      switchcount ++;      
    } else {
      /*If no switching has been done AND the direction is &quot;asc&quot;,
      set the direction to &quot;desc&quot; and run the while loop again.*/
      if (switchcount == 0 &amp;&amp; dir == &quot;desc&quot;) {
        dir = &quot;asc&quot;;
        switching = true;
      }
    }
  }
}
&lt;/script&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img src=&quot;/images/DougCoDownTheBallot.png&quot; alt=&quot;&quot; /&gt;&lt;/span&gt;So what happened to Douglas County voters? Why the sudden purple hue? Races further down the ballot give us some insight into why the citizens of Douglas County voted the way they did, and we see that these results don’t quite fit the “blue wave” narrative that everyone is so fond of using. Across the board, Democrats did get a bump compared to previous years because of all the factors listed above, but some of that advantage disappears down the ballot. The higher profile races with national implications, i.e. the House and Governor’s races, only had a Republican edge of 5.9% while the race for Attorney General ballooned up to 13.5%. This could suggest that voters wanted to rebuke the White House while keeping local government conservative.&lt;/p&gt;

&lt;h3&gt;Races Down the Ballot in the DougCo Portion of CO-6&lt;/h3&gt;
&lt;table id=&quot;myTable2&quot;&gt;
  &lt;tr height=&quot;50&quot;&gt;
   &lt;!--When a header is clicked, run the sortTable function, with a parameter, 0 for sorting by names, 1 for sorting by country:--&gt;  
    &lt;th onclick=&quot;sortTable2(0)&quot;&gt;Position&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber2(1)&quot;&gt;Republican Vote %&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber2(2)&quot;&gt;Democrat Vote %&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber2(3)&quot;&gt;Margin (%)&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;House&lt;/td&gt;
    &lt;td&gt;51.7&lt;/td&gt;
    &lt;td&gt;45.8&lt;/td&gt;
    &lt;td&gt;5.9&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Governor&lt;/td&gt;
    &lt;td&gt;51.6&lt;/td&gt;
    &lt;td&gt;45.7&lt;/td&gt;
    &lt;td&gt;5.9&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Secretary of State&lt;/td&gt;
    &lt;td&gt;53.6&lt;/td&gt;
    &lt;td&gt;44.6&lt;/td&gt;
    &lt;td&gt;9.0&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;State Treasurer&lt;/td&gt;
    &lt;td&gt;54.3&lt;/td&gt;
    &lt;td&gt;43.8&lt;/td&gt;
    &lt;td&gt;10.5&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Attorney General&lt;/td&gt;
    &lt;td&gt;55.5&lt;/td&gt;
    &lt;td&gt;42.0&lt;/td&gt;
    &lt;td&gt;13.5&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;script&gt;
function sortTable2(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById(&quot;myTable2&quot;);
  switching = true;
  //Set the sorting direction to ascending:
  dir = &quot;desc&quot;; 
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i &lt; (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].getElementsByTagName(&quot;TD&quot;)[n];
      y = rows[i + 1].getElementsByTagName(&quot;TD&quot;)[n];
      /*check if the two rows should switch place,
      based on the direction, asc or desc:*/
      if (dir == &quot;asc&quot;) {
        if (x.innerHTML.toLowerCase() &gt; y.innerHTML.toLowerCase()) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      } else if (dir == &quot;desc&quot;) {
        if (x.innerHTML.toLowerCase() &lt; y.innerHTML.toLowerCase()) {
          //if so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      //Each time a switch is done, increase this count by 1:
      switchcount ++;      
    } else {
      /*If no switching has been done AND the direction is &quot;asc&quot;,
      set the direction to &quot;desc&quot; and run the while loop again.*/
      if (switchcount == 0 &amp;&amp; dir == &quot;desc&quot;) {
        dir = &quot;asc&quot;;
        switching = true;
      }
    }
  }
}

function sortTableNumber2(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById(&quot;myTable2&quot;);
  switching = true;
  //Set the sorting direction to ascending:
  dir = &quot;desc&quot;; 
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i &lt; (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].getElementsByTagName(&quot;TD&quot;)[n];
      y = rows[i + 1].getElementsByTagName(&quot;TD&quot;)[n];
      /*check if the two rows should switch place,
      based on the direction, asc or desc:*/
      if (dir == &quot;asc&quot;) {
        if (Number(x.innerHTML) &gt; Number(y.innerHTML)) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      } else if (dir == &quot;desc&quot;) {
        if (Number(x.innerHTML) &lt; Number(y.innerHTML)) {
          //if so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      //Each time a switch is done, increase this count by 1:
      switchcount ++;      
    } else {
      /*If no switching has been done AND the direction is &quot;asc&quot;,
      set the direction to &quot;desc&quot; and run the while loop again.*/
      if (switchcount == 0 &amp;&amp; dir == &quot;desc&quot;) {
        dir = &quot;asc&quot;;
        switching = true;
      }
    }
  }
}
&lt;/script&gt;

&lt;p&gt;So if the &lt;a href=&quot;https://fivethirtyeight.com/features/the-suburbs-all-kinds-of-suburbs-delivered-the-house-to-democrats/&quot;&gt;suburbs were what handed Democrats the House in 2018&lt;/a&gt;, the Douglas County portion of CO-6 should be exhibit A. Obviously, part of Jason Crow’s success in this area was regression to the mean – it was already so red that there was really nowhere to go but up – but it even stands out when comparing apples to apples. Out of the the top ten districts most similar to CO-6 according to &lt;a href=&quot;https://fivethirtyeight.com/methodology/how-fivethirtyeights-house-and-senate-models-work/&quot;&gt;FiveThirtyEight’s similarity metrics&lt;/a&gt;, three were held by a Republican before the midterms. All three seats flipped to Democrats, but in terms of gain in vote margin, CO-6 just barely finishes second to Kansas’s 3rd district (KS-3) by only 0.3%. In fact, the comparison between Jason Crow’s victory and &lt;a href=&quot;https://projects.fivethirtyeight.com/2018-midterm-election-forecast/house/kansas/3/&quot;&gt;Sharice Davids’ victory in KS-3&lt;/a&gt; is actually rather fitting. In the primaries, Davids’ defeated a Bernie-Sanders-endorsed candidate to move on to the general election, possibly suggesting a desire for moderate candidates in KS-3 similar to CO-6. And while the storyline of a gay Native American MMA-fighter candidate will generate more national attention than yet another white male running for congress, the energy levels behind both campaigns in historically red districts seem reminiscent of each other. Both benefitted from early grass roots organizing by neighborhood volunteers refusing to accept the status quo.&lt;/p&gt;

&lt;h3&gt; Demographically, Geographically, and Politically Similar Districts to CO-6&lt;/h3&gt;
&lt;table id=&quot;myTable3&quot;&gt;
  &lt;tr height=&quot;50&quot;&gt;
   &lt;!--When a header is clicked, run the sortTable function, with a parameter, 0 for sorting by names, 1 for sorting by country:--&gt;  
    &lt;th onclick=&quot;sortTable3(0)&quot;&gt;District&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber3(1)&quot;&gt;2016 Margin of Defeat (%)&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber3(2)&quot;&gt;2018 Margin of Victory (%)&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber3(3)&quot;&gt;Democratic Gain (%)&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;CO-6&lt;/td&gt;
    &lt;td&gt;8.3&lt;/td&gt;
    &lt;td&gt;11.2&lt;/td&gt;
    &lt;td&gt;19.5&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;CA-49&lt;/td&gt;
    &lt;td&gt;0.5&lt;/td&gt;
    &lt;td&gt;7.4&lt;/td&gt;
    &lt;td&gt;7.9&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;CA-25&lt;/td&gt;
    &lt;td&gt;6.3&lt;/td&gt;
    &lt;td&gt;6.4&lt;/td&gt;
    &lt;td&gt;12.7&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;KS-3&lt;/td&gt;
    &lt;td&gt;10.7&lt;/td&gt;
    &lt;td&gt;9.1&lt;/td&gt;
    &lt;td&gt;19.8&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;script&gt;
function sortTable3(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById(&quot;myTable3&quot;);
  switching = true;
  //Set the sorting direction to ascending:
  dir = &quot;desc&quot;; 
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i &lt; (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].getElementsByTagName(&quot;TD&quot;)[n];
      y = rows[i + 1].getElementsByTagName(&quot;TD&quot;)[n];
      /*check if the two rows should switch place,
      based on the direction, asc or desc:*/
      if (dir == &quot;asc&quot;) {
        if (x.innerHTML.toLowerCase() &gt; y.innerHTML.toLowerCase()) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      } else if (dir == &quot;desc&quot;) {
        if (x.innerHTML.toLowerCase() &lt; y.innerHTML.toLowerCase()) {
          //if so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      //Each time a switch is done, increase this count by 1:
      switchcount ++;      
    } else {
      /*If no switching has been done AND the direction is &quot;asc&quot;,
      set the direction to &quot;desc&quot; and run the while loop again.*/
      if (switchcount == 0 &amp;&amp; dir == &quot;desc&quot;) {
        dir = &quot;asc&quot;;
        switching = true;
      }
    }
  }
}

function sortTableNumber3(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById(&quot;myTable3&quot;);
  switching = true;
  //Set the sorting direction to ascending:
  dir = &quot;desc&quot;; 
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i &lt; (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].getElementsByTagName(&quot;TD&quot;)[n];
      y = rows[i + 1].getElementsByTagName(&quot;TD&quot;)[n];
      /*check if the two rows should switch place,
      based on the direction, asc or desc:*/
      if (dir == &quot;asc&quot;) {
        if (Number(x.innerHTML) &gt; Number(y.innerHTML)) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      } else if (dir == &quot;desc&quot;) {
        if (Number(x.innerHTML) &lt; Number(y.innerHTML)) {
          //if so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      //Each time a switch is done, increase this count by 1:
      switchcount ++;      
    } else {
      /*If no switching has been done AND the direction is &quot;asc&quot;,
      set the direction to &quot;desc&quot; and run the while loop again.*/
      if (switchcount == 0 &amp;&amp; dir == &quot;desc&quot;) {
        dir = &quot;asc&quot;;
        switching = true;
      }
    }
  }
}
&lt;/script&gt;

&lt;p&gt;Two and a half weeks of door-knocking, organizing, and getting out the vote felt far more like two and a half months. It would normally be difficult to imagine how people would have survived the entire campaign, but the energy and passion for change of the volunteers that came to make a difference had to have something to do with it. There’s no way you make it through an entire campaign without neighborhood leaders like Darien and Kathy, without expert phone-bankers like Connie, without unstoppable doorknockers like Brian and Sam, and without energy boosts from seasoned campaign veterans like my partner, Ashley (of course I was going to shamelessly brag about my wife at some point during this article). Jason Crow and his team ran a hell of a campaign, but if there’s anyone to credit with this win, it’s the citizens of Colorado’s 6th district that gave their time, sweat, and effort to the idea that change can materialize anywhere. More than anything, that is what it takes to turn red into purple.&lt;/p&gt;

&lt;h6&gt;All election results presented here are unofficial as of November 23rd, 2018 and a spreadsheet containing all relevant data is available &lt;a href=&quot;https://github.com/tefirman/StatisticalStumbles/blob/master/DouglasCounty_AllResults.xlsx&quot;&gt;here&lt;/a&gt; on &lt;a href=&quot;https://github.com/tefirman&quot;&gt;my GitHub page&lt;/a&gt;.







&lt;/h6&gt;</content><summary type="html">Colorado's 6th Congressional District is a perfect example of why every turf matters...</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/images/DougCoPurple.png" /></entry><entry><title type="html">Riddler Answer: Grazed and Confused</title><link href="/blog/GrazedAndConfused/" rel="alternate" type="text/html" title="Riddler Answer: Grazed and Confused" /><published>2018-10-13T00:00:00-06:00</published><updated>2018-10-13T00:00:00-06:00</updated><id>/blog/GrazedAndConfused</id><content type="html" xml:base="/blog/GrazedAndConfused/">&lt;head&gt;
&lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot; /&gt;
&lt;meta name=&quot;twitter:creator&quot; content=&quot;@tefirman51&quot; /&gt;
&lt;meta name=&quot;twitter:site&quot; content=&quot;@tefirman51&quot; /&gt;
&lt;meta name=&quot;twitter:title&quot; content=&quot;Riddler Answer: Grazed and Confused&quot; /&gt;
&lt;meta name=&quot;twitter:description&quot; content=&quot;This week's Riddler asks us to provide some restraint for an overeating goat before they graze a farmer out of business...&quot; /&gt;
&lt;meta name=&quot;twitter:image:src&quot; content=&quot;https://tefirman.github.io/images/BabyGoat.jpg&quot; /&gt;
&lt;meta name=&quot;twitter:image:width&quot; content=&quot;280&quot; /&gt;
&lt;meta name=&quot;twitter:image:height&quot; content=&quot;150&quot; /&gt;
&lt;/head&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML&quot; async=&quot;&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;/images/GoatGrazing.gif&quot; alt=&quot;&quot; /&gt;&lt;/span&gt;On this week’s &lt;a href=&quot;https://fivethirtyeight.com/features/so-you-want-to-tether-your-goat-now-what/&quot;&gt;edition&lt;/a&gt; of the Riddler, Moritz Hesse introduces us to a farmer that owns a circular field of radius &lt;script type=&quot;math/tex&quot;&gt;R&lt;/script&gt; and a particularly hungry goat. Growing tired of the kid running amok, the farmer decides to tie the goat up to a post on the fence surrounding the field, but needs to ensure that the goat doesn’t graze the entire field. The question posed is this: How long does the goat’s tether need to be to ensure that the goat only eats half of the circular field? To better visualize this agricultural quandry, see the gif shown to the right. At shorter tether lengths, the more limiting factor is the actual tether restricting the goat from running free within the circle, but as it gets longer, the fence is really the only thing limiting the goat’s appetite.&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;/images/GeometryDemo1.png&quot; alt=&quot;&quot; /&gt;&lt;img src=&quot;/images/GeometryDemo2.png&quot; alt=&quot;&quot; /&gt;&lt;/span&gt;To find the correct tether length, we really just need a bit of clever geometry. The grazing area covered by a tether of length &lt;script type=&quot;math/tex&quot;&gt;L&lt;/script&gt; can be split into two regions shown in the diagram to the right: the area swept out by the tether if the goat is pulling it taut, which we will call &lt;script type=&quot;math/tex&quot;&gt;A_1&lt;/script&gt;, and the pizza crust looking areas to the sides of the post that the goat is tied to, which we will call &lt;script type=&quot;math/tex&quot;&gt;A_2&lt;/script&gt;. Let’s start by focusing on &lt;script type=&quot;math/tex&quot;&gt;A_1&lt;/script&gt; and laying things out a bit more clearly. In the second diagram, I define &lt;script type=&quot;math/tex&quot;&gt;\theta&lt;/script&gt; as the angle from vertical that the goat can reach with a taut leash until hitting the fence. This can be calculated in terms of &lt;script type=&quot;math/tex&quot;&gt;R&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;L&lt;/script&gt; as&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\theta = \cos^{-1}\frac{L/2}{R}.&lt;/script&gt;

&lt;p&gt;This quickly leads us to the area of &lt;script type=&quot;math/tex&quot;&gt;A_1&lt;/script&gt; as&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;A_1 = \theta L^2.&lt;/script&gt;

&lt;p&gt;The area of &lt;script type=&quot;math/tex&quot;&gt;A_2&lt;/script&gt; is a bit more complicated, but I compared them to pizza crust for a reason. We can calculate &lt;script type=&quot;math/tex&quot;&gt;A_2&lt;/script&gt; by cutting out a slice of pizza out of the circular field of angle &lt;script type=&quot;math/tex&quot;&gt;\pi - 2\theta&lt;/script&gt; and subtracting away the cheesy triangular portion with all the toppings. This leads us to&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;A_2 = (\pi/2 - \theta) R^2 - \frac{L}{2} R \sin \theta&lt;/script&gt;

&lt;p&gt;Finally, we can combine these areas to calculate the entire grazing area as&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;A_g = A_1 + 2 A_2 = \theta L^2 + 2 \left[ (\pi/2 - \theta) R^2 - \frac{L}{2} R \sin \theta \right]&lt;/script&gt;

&lt;p&gt;Setting &lt;script type=&quot;math/tex&quot;&gt;A_g = \pi R^2&lt;/script&gt; and algebraically solving for &lt;script type=&quot;math/tex&quot;&gt;L&lt;/script&gt; would prove difficult/impossible so I decided to use a &lt;a href=&quot;https://en.wikipedia.org/wiki/Nelder–Mead_method&quot;&gt;Nelder-Mead simplex algorithm&lt;/a&gt; to numerically solve for &lt;script type=&quot;math/tex&quot;&gt;L&lt;/script&gt; in the following Python script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import numpy as np
from scipy.optimize import minimize

targetPortion = 0.5

def grazing_area(tether):
    global targetPortion
    ### Assuming field radius is 1 for ease of calculation ###
    theta = np.arccos(tether/2)
    area = (theta*(tether**2) + 2*((np.pi/2 - theta) - tether/2*np.sin(theta)))/np.pi
    return (area - targetPortion)**2

res = minimize(grazing_area,0.5,method='nelder-mead',tol=1e-6)
print(str(round(100*targetPortion,1))[:-2] + '% grazing at L = ' + str(round(res['x'][0],4)) + 'R')
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;/images/TetherLengthVsGrazing.png&quot; alt=&quot;&quot; /&gt;&lt;/span&gt;This &lt;a href=&quot;https://github.com/tefirman/RiddlerCode/blob/master/GoatTether.py&quot;&gt;code&lt;/a&gt; advises us that in order to restrict the goat to half of the grazing area, we must tie up the ravenous kid with a tether of length &lt;script type=&quot;math/tex&quot;&gt;L = 1.1587R&lt;/script&gt;. In fact, just in case the local veterinarian recommends increasing or decreasing the goat’s diet, we can vary the target portion of the grazing area to produce the dependency as shown in the graph to the right. Hope this explanation was reasonably clear! Stay classy, Riddler Nation!&lt;/p&gt;</content><summary type="html">This week's Riddler asks us to provide some restraint for an overeating goat before they graze a farmer out of business...</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/images/BabyGoat.jpg" /></entry><entry><title type="html">The (Un)Luckiest Season of All</title><link href="/blog/TheUnLuckiestSeason/" rel="alternate" type="text/html" title="The (Un)Luckiest Season of All" /><published>2018-10-04T00:00:00-06:00</published><updated>2018-10-04T00:00:00-06:00</updated><id>/blog/TheUnLuckiestSeason</id><content type="html" xml:base="/blog/TheUnLuckiestSeason/">&lt;head&gt;
&lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot; /&gt;
&lt;meta name=&quot;twitter:creator&quot; content=&quot;@tefirman51&quot; /&gt;
&lt;meta name=&quot;twitter:site&quot; content=&quot;@tefirman51&quot; /&gt;
&lt;meta name=&quot;twitter:title&quot; content=&quot;The (Un)Luckiest Season of All&quot; /&gt;
&lt;meta name=&quot;twitter:description&quot; content=&quot;Depending on which statistics you look at, the Seattle Mariners had either the luckiest or unluckiest season in recent memory... #SchrodingersBaseballTeam&quot; /&gt;
&lt;meta name=&quot;twitter:image:src&quot; content=&quot;https://tefirman.github.io/images/DiazPuzzled.jpg&quot; /&gt;
&lt;meta name=&quot;twitter:image:width&quot; content=&quot;280&quot; /&gt;
&lt;meta name=&quot;twitter:image:height&quot; content=&quot;150&quot; /&gt;
&lt;/head&gt;

&lt;p&gt;On September 19th, the Seattle Mariners were 84-68, a record that in any other season would send even the ficklest Seattle fan clamoring for their suddenly fashionable Griffey jerseys gathering dust in the back of their closets. But in this logic-defying year of baseball, their season was effectively over despite being a game or less behind four of the ten available playoff spots. With the A’s and Astros streaking into October, what would normally amount to at least a playoff chase was reduced to nothing more than consolation games.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;/images/RealVsPythagHeatMap.png&quot; alt=&quot;&quot; /&gt;&lt;/span&gt;But before we dive too far into self-pity, Mariners fans should probably be thankful that they even got this far considering the team’s performance in terms of runs. The easiest stat to point to is run differential where, despite having won more games than lost, the M’s allowed 34 more runs than they scored. But the far more interesting stat is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Pythagorean_expectation&quot;&gt;Pythagorean Win Expectancy (PWE)&lt;/a&gt;. According to this metric, they should be sitting at a .478 win percentage, a season-long difference of 12 games compared to the Mariners’ final .549 pace. Obviously, credit has to be given to the Herculean effort of Edwin Diaz and his 57 saves, but a little bit of luck had to have been involved, considering that only nine other teams since the deadball era have ever outperformed their PWE by more. (One notable example of these outperformers is the &lt;a href=&quot;https://en.wikipedia.org/wiki/1981_Cincinnati_Reds_season&quot;&gt;1981 Reds&lt;/a&gt;, who actually got shafted much harder than this year’s M’s due to a strike-shortened season. Despite having the best overall record in the NL, a midseason strike reset the standings, leaving Ken Griffey Sr. out in the cold.)&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img src=&quot;/images/PlayoffProbHist.png&quot; alt=&quot;&quot; /&gt;&lt;/span&gt; Just to give you an idea of how unlucky/lucky this season has been, a team with 89 wins (as the Mariners ended up with) makes the playoffs about 70% of the time according to a logistic regression run by &lt;a href=&quot;https://fivethirtyeight.com/features/the-seattle-mariners-cant-catch-a-postseason-break/&quot;&gt;FiveThirtyEight&lt;/a&gt;. But a team with just 77 wins (as the M’s PWE projects them to have) makes the playoffs less than 1% of the time. The bottom line is that while we should have a better view of the mythical land of playoff baseball, the fact that we’re within a nautical mile is a miracle in itself.&lt;/p&gt;

&lt;p&gt;But that doesn’t take away any of the sting, does it? Why is a franchise that has had notoriously terrible playoff luck in recent years getting clubbed over the head by the baseball gods once again? In 2016, &lt;a href=&quot;https://twitter.com/No_Little_Plans&quot;&gt;Rob Arthur&lt;/a&gt; &lt;a href=&quot;https://fivethirtyeight.com/features/the-seattle-mariners-cant-catch-a-postseason-break/&quot;&gt;unsurprisingly crowned&lt;/a&gt; the Seattle Mariners the “Unluckiest MLB Franchise Since 1998” by comparing the number of actual and expected playoff appearances based on regular season records. If we update this to include the last two seasons, it gets even worse. Based on their records, the Mariners should have been to the playoffs an additional three times in the last two decades, almost twice as many as the nearest franchise. Even if we utilize the PWE instead of the actual win percentage to calculate expected playoff appearances, the M’s remain the unluckiest team by almost an entire playoff berth.&lt;/p&gt;

&lt;style&gt;
table {
    border-spacing: 0;
    width: 100%;
    border: 1px solid #ddd;
    line-height: 1
}

th {
    cursor: pointer;
}

th, td {
    text-align: left;
    padding: 0px;
    vertical-align: middle;
    min-height: 1px;
    border-left: 1px solid #ddd;
    border-right: 1px solid #ddd;
}

tr:nth-child(even) {
    background-color: #f2f2f2
}
&lt;/style&gt;

&lt;h3&gt;Playoff Karma By MLB Franchise&lt;/h3&gt;
&lt;table id=&quot;myTable&quot;&gt;
  &lt;tr height=&quot;50&quot;&gt;
   &lt;!--When a header is clicked, run the sortTable function, with a parameter, 0 for sorting by names, 1 for sorting by country:--&gt;  
    &lt;th onclick=&quot;sortTable(0)&quot;&gt;Franchise&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber(1)&quot;&gt;Actual&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber(2)&quot;&gt;Expected&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber(3)&quot;&gt;Difference&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber(4)&quot;&gt;Expected (PWE)&lt;/th&gt;
    &lt;th onclick=&quot;sortTableNumber(5)&quot;&gt;Difference (PWE)&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Seattle Mariners&lt;/td&gt;
    &lt;td&gt;2&lt;/td&gt;
    &lt;td&gt;5.27&lt;/td&gt;
    &lt;td&gt;3.27&lt;/td&gt;
    &lt;td&gt;4.91&lt;/td&gt;
    &lt;td&gt;2.91&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Boston Red Sox&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
    &lt;td&gt;13.44&lt;/td&gt;
    &lt;td&gt;1.44&lt;/td&gt;
    &lt;td&gt;13.35&lt;/td&gt;
    &lt;td&gt;1.35&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Tampa Bay Rays&lt;/td&gt;
    &lt;td&gt;4&lt;/td&gt;
    &lt;td&gt;5.26&lt;/td&gt;
    &lt;td&gt;1.26&lt;/td&gt;
    &lt;td&gt;4.64&lt;/td&gt;
    &lt;td&gt;0.64&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Los Angeles Angels&lt;/td&gt;
    &lt;td&gt;7&lt;/td&gt;
    &lt;td&gt;8.24&lt;/td&gt;
    &lt;td&gt;1.24&lt;/td&gt;
    &lt;td&gt;6.05&lt;/td&gt;
    &lt;td&gt;-0.95&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;San Francisco Giants&lt;/td&gt;
    &lt;td&gt;7&lt;/td&gt;
    &lt;td&gt;8.06&lt;/td&gt;
    &lt;td&gt;1.06&lt;/td&gt;
    &lt;td&gt;7.6&lt;/td&gt;
    &lt;td&gt;0.6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Toronto Blue Jays&lt;/td&gt;
    &lt;td&gt;2&lt;/td&gt;
    &lt;td&gt;2.72&lt;/td&gt;
    &lt;td&gt;0.72&lt;/td&gt;
    &lt;td&gt;4.02&lt;/td&gt;
    &lt;td&gt;2.02&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Chicago White Sox&lt;/td&gt;
    &lt;td&gt;3&lt;/td&gt;
    &lt;td&gt;3.67&lt;/td&gt;
    &lt;td&gt;0.67&lt;/td&gt;
    &lt;td&gt;3.38&lt;/td&gt;
    &lt;td&gt;0.38&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Cincinnati Reds&lt;/td&gt;
    &lt;td&gt;3&lt;/td&gt;
    &lt;td&gt;3.56&lt;/td&gt;
    &lt;td&gt;0.56&lt;/td&gt;
    &lt;td&gt;3.8&lt;/td&gt;
    &lt;td&gt;0.8&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Cleveland Indians&lt;/td&gt;
    &lt;td&gt;8&lt;/td&gt;
    &lt;td&gt;8.53&lt;/td&gt;
    &lt;td&gt;0.53&lt;/td&gt;
    &lt;td&gt;8.19&lt;/td&gt;
    &lt;td&gt;0.19&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Washington Nationals&lt;/td&gt;
    &lt;td&gt;4&lt;/td&gt;
    &lt;td&gt;4.5&lt;/td&gt;
    &lt;td&gt;0.5&lt;/td&gt;
    &lt;td&gt;5.73&lt;/td&gt;
    &lt;td&gt;1.73&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Oakland Athletics&lt;/td&gt;
    &lt;td&gt;9&lt;/td&gt;
    &lt;td&gt;9.24&lt;/td&gt;
    &lt;td&gt;0.24&lt;/td&gt;
    &lt;td&gt;8.82&lt;/td&gt;
    &lt;td&gt;-0.18&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;New York Mets&lt;/td&gt;
    &lt;td&gt;5&lt;/td&gt;
    &lt;td&gt;5.21&lt;/td&gt;
    &lt;td&gt;0.21&lt;/td&gt;
    &lt;td&gt;4.38&lt;/td&gt;
    &lt;td&gt;-0.62&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Kansas City Royals&lt;/td&gt;
    &lt;td&gt;2&lt;/td&gt;
    &lt;td&gt;2.09&lt;/td&gt;
    &lt;td&gt;0.09&lt;/td&gt;
    &lt;td&gt;1.4&lt;/td&gt;
    &lt;td&gt;-0.6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Miami Marlins&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
    &lt;td&gt;1.04&lt;/td&gt;
    &lt;td&gt;0.04&lt;/td&gt;
    &lt;td&gt;0.32&lt;/td&gt;
    &lt;td&gt;-0.68&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Milwaukee Brewers&lt;/td&gt;
    &lt;td&gt;3&lt;/td&gt;
    &lt;td&gt;3.02&lt;/td&gt;
    &lt;td&gt;0.02&lt;/td&gt;
    &lt;td&gt;2.18&lt;/td&gt;
    &lt;td&gt;-0.82&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Detroit Tigers&lt;/td&gt;
    &lt;td&gt;5&lt;/td&gt;
    &lt;td&gt;4.98&lt;/td&gt;
    &lt;td&gt;-0.02&lt;/td&gt;
    &lt;td&gt;3.73&lt;/td&gt;
    &lt;td&gt;-1.27&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Baltimore Orioles&lt;/td&gt;
    &lt;td&gt;3&lt;/td&gt;
    &lt;td&gt;2.91&lt;/td&gt;
    &lt;td&gt;-0.09&lt;/td&gt;
    &lt;td&gt;1.59&lt;/td&gt;
    &lt;td&gt;-1.41&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Philadelphia Phillies&lt;/td&gt;
    &lt;td&gt;5&lt;/td&gt;
    &lt;td&gt;4.86&lt;/td&gt;
    &lt;td&gt;-0.14&lt;/td&gt;
    &lt;td&gt;5.13&lt;/td&gt;
    &lt;td&gt;0.13&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Texas Rangers&lt;/td&gt;
    &lt;td&gt;7&lt;/td&gt;
    &lt;td&gt;6.8&lt;/td&gt;
    &lt;td&gt;-0.2&lt;/td&gt;
    &lt;td&gt;4.49&lt;/td&gt;
    &lt;td&gt;-2.51&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Pittsburgh Pirates&lt;/td&gt;
    &lt;td&gt;3&lt;/td&gt;
    &lt;td&gt;2.62&lt;/td&gt;
    &lt;td&gt;-0.38&lt;/td&gt;
    &lt;td&gt;2.03&lt;/td&gt;
    &lt;td&gt;-0.97&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;San Diego Padres&lt;/td&gt;
    &lt;td&gt;3&lt;/td&gt;
    &lt;td&gt;2.5&lt;/td&gt;
    &lt;td&gt;-0.5&lt;/td&gt;
    &lt;td&gt;2.3&lt;/td&gt;
    &lt;td&gt;-0.7&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Arizona Diamondbacks&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
    &lt;td&gt;5.48&lt;/td&gt;
    &lt;td&gt;-0.52&lt;/td&gt;
    &lt;td&gt;5.04&lt;/td&gt;
    &lt;td&gt;-0.96&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Los Angeles Dodgers&lt;/td&gt;
    &lt;td&gt;10&lt;/td&gt;
    &lt;td&gt;9.28&lt;/td&gt;
    &lt;td&gt;-0.72&lt;/td&gt;
    &lt;td&gt;8.24&lt;/td&gt;
    &lt;td&gt;-1.76&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;New York Yankees&lt;/td&gt;
    &lt;td&gt;17&lt;/td&gt;
    &lt;td&gt;16.14&lt;/td&gt;
    &lt;td&gt;-0.86&lt;/td&gt;
    &lt;td&gt;14.26&lt;/td&gt;
    &lt;td&gt;-2.74&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Houston Astros&lt;/td&gt;
    &lt;td&gt;8&lt;/td&gt;
    &lt;td&gt;6.89&lt;/td&gt;
    &lt;td&gt;-1.11&lt;/td&gt;
    &lt;td&gt;7.83&lt;/td&gt;
    &lt;td&gt;-0.17&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Atlanta Braves&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
    &lt;td&gt;10.83&lt;/td&gt;
    &lt;td&gt;-1.17&lt;/td&gt;
    &lt;td&gt;11.51&lt;/td&gt;
    &lt;td&gt;-0.49&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;St. Louis Cardinals&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
    &lt;td&gt;10.79&lt;/td&gt;
    &lt;td&gt;-1.21&lt;/td&gt;
    &lt;td&gt;11.34&lt;/td&gt;
    &lt;td&gt;-0.66&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Colorado Rockies&lt;/td&gt;
    &lt;td&gt;4&lt;/td&gt;
    &lt;td&gt;2.71&lt;/td&gt;
    &lt;td&gt;-1.29&lt;/td&gt;
    &lt;td&gt;2.09&lt;/td&gt;
    &lt;td&gt;-1.91&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Chicago Cubs&lt;/td&gt;
    &lt;td&gt;8&lt;/td&gt;
    &lt;td&gt;6.57&lt;/td&gt;
    &lt;td&gt;-1.43&lt;/td&gt;
    &lt;td&gt;6.49&lt;/td&gt;
    &lt;td&gt;-1.51&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr height=&quot;5&quot;&gt;
    &lt;td&gt;Minnesota Twins&lt;/td&gt;
    &lt;td&gt;7&lt;/td&gt;
    &lt;td&gt;5.07&lt;/td&gt;
    &lt;td&gt;-1.93&lt;/td&gt;
    &lt;td&gt;2.86&lt;/td&gt;
    &lt;td&gt;-4.14&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;script&gt;
function sortTable(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById(&quot;myTable&quot;);
  switching = true;
  //Set the sorting direction to ascending:
  dir = &quot;desc&quot;; 
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i &lt; (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].getElementsByTagName(&quot;TD&quot;)[n];
      y = rows[i + 1].getElementsByTagName(&quot;TD&quot;)[n];
      /*check if the two rows should switch place,
      based on the direction, asc or desc:*/
      if (dir == &quot;asc&quot;) {
        if (x.innerHTML.toLowerCase() &gt; y.innerHTML.toLowerCase()) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      } else if (dir == &quot;desc&quot;) {
        if (x.innerHTML.toLowerCase() &lt; y.innerHTML.toLowerCase()) {
          //if so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      //Each time a switch is done, increase this count by 1:
      switchcount ++;      
    } else {
      /*If no switching has been done AND the direction is &quot;asc&quot;,
      set the direction to &quot;desc&quot; and run the while loop again.*/
      if (switchcount == 0 &amp;&amp; dir == &quot;asc&quot;) {
        dir = &quot;desc&quot;;
        switching = true;
      }
    }
  }
}

function sortTableNumber(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById(&quot;myTable&quot;);
  switching = true;
  //Set the sorting direction to ascending:
  dir = &quot;desc&quot;; 
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i &lt; (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].getElementsByTagName(&quot;TD&quot;)[n];
      y = rows[i + 1].getElementsByTagName(&quot;TD&quot;)[n];
      /*check if the two rows should switch place,
      based on the direction, asc or desc:*/
      if (dir == &quot;asc&quot;) {
        if (Number(x.innerHTML) &gt; Number(y.innerHTML)) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      } else if (dir == &quot;desc&quot;) {
        if (Number(x.innerHTML) &lt; Number(y.innerHTML)) {
          //if so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      //Each time a switch is done, increase this count by 1:
      switchcount ++;      
    } else {
      /*If no switching has been done AND the direction is &quot;asc&quot;,
      set the direction to &quot;desc&quot; and run the while loop again.*/
      if (switchcount == 0 &amp;&amp; dir == &quot;desc&quot;) {
        dir = &quot;asc&quot;;
        switching = true;
      }
    }
  }
}
&lt;/script&gt;

&lt;p&gt;So why can’t the M’s catch a break after seventeen long years of frustration? Well, for a couple reasons: (1) &lt;a href=&quot;https://en.wikipedia.org/wiki/Gambler%27s_fallacy&quot;&gt;That’s not how probability works.&lt;/a&gt; Past outcomes do not affect future probabilities. If I flip a coin and get ten heads in a row, the odds of getting heads an eleventh time are still 50-50. A baseball doesn’t remember previous seasons and then adjust its path accordingly. (2) As many of you may have seen by now, the AL has a &lt;a href=&quot;https://fivethirtyeight.com/features/the-orioles-and-royals-could-at-least-still-beat-a-triple-a-team-right/&quot;&gt;parity (read: tanking) problem&lt;/a&gt;, where bad teams appear worse and good teams appear better. The standard deviation of win percentages in the AL is the largest in either league since 1962 and the range is the largest since 1954 (thanks Baltimore). This wide spread means that just being good won’t cut it. Only absurd 97-win seasons will keep you in the running, a feat that was achieved by the second wild card Oakland Athletics.&lt;/p&gt;

&lt;p&gt;So to mentally put this season to bed, the 2018 Mariners are either extremely lucky or unlucky based on what statistics you look at. I choose to see it in a positive light as a lucky one, but all of this analysis boils down to the age-old philosophical question of whether your beer is half empty or half full. Regardless, order another one because professional sports’ longest playoff drought is lasting at least another year and the A’s and Astros are playing in October.&lt;/p&gt;

&lt;h6&gt;MLB season-by-season data was provided by &lt;a href=&quot;https://www.retrosheet.org/gamelogs/index.html&quot;&gt;Retrosheets&lt;/a&gt; and &lt;a href=&quot;https://www.baseball-reference.com/leagues/MLB/2018-standings.shtml&quot;&gt;Baseball-Reference&lt;/a&gt;, and the Python code used to process this data is available &lt;a href=&quot;https://github.com/tefirman/StatisticalStumbles/blob/master/RecordAnalysis.py&quot;&gt;here&lt;/a&gt; on &lt;a href=&quot;https://github.com/tefirman&quot;&gt;my Github page&lt;/a&gt;.


&lt;/h6&gt;</content><summary type="html">Depending on which statistics you look at, the Seattle Mariners had either the luckiest or unluckiest season in recent memory... #SchrodingersBaseballTeam</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/images/DiazPuzzled.jpg" /></entry><entry><title type="html">Riddler Submission</title><link href="/blog/RockPaperScissorsHop/" rel="alternate" type="text/html" title="Riddler Submission" /><published>2018-09-15T00:00:00-06:00</published><updated>2018-09-15T00:00:00-06:00</updated><id>/blog/RockPaperScissorsHop</id><content type="html" xml:base="/blog/RockPaperScissorsHop/">&lt;head&gt;
&lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot; /&gt;
&lt;meta name=&quot;twitter:creator&quot; content=&quot;@tefirman51&quot; /&gt;
&lt;meta name=&quot;twitter:site&quot; content=&quot;@tefirman51&quot; /&gt;
&lt;meta name=&quot;twitter:title&quot; content=&quot;Riddler Submission&quot; /&gt;
&lt;meta name=&quot;twitter:description&quot; content=&quot;Got a riddle published in the Riddler: Life goal complete! Try your hand at a game I call 'Rock-Paper-Scissors-Hop'...&quot; /&gt;
&lt;meta name=&quot;twitter:image:src&quot; content=&quot;https://tefirman.github.io/images/RockPaperScissorsHop.gif&quot; /&gt;
&lt;meta name=&quot;twitter:image:width&quot; content=&quot;280&quot; /&gt;
&lt;meta name=&quot;twitter:image:height&quot; content=&quot;150&quot; /&gt;
&lt;/head&gt;

&lt;p&gt;As you will come to notice throughout the course of this blog, I am a big fan of the website &lt;a href=&quot;https://fivethirtyeight.com&quot;&gt;FiveThirtyEight&lt;/a&gt; and one weekly segment called &lt;a href=&quot;https://fivethirtyeight.com/tag/the-riddler/&quot;&gt;The Riddler&lt;/a&gt; edited by &lt;a href=&quot;https://twitter.com/ollie&quot;&gt;Oliver Roeder&lt;/a&gt;. Every Friday, it challenges its readers to two math/probability/logic puzzles, one shorter, more accessible problem and one longer, more time-consuming problem for the hardcore puzzle nerds. It’s a fun way to end the week while stretching your brain and maybe picking up a computational tool or two while you’re at it.&lt;/p&gt;

&lt;p&gt;After getting hooked and submitting answers for a few months, I started itching to submit a &lt;i&gt;question&lt;/i&gt; for the Riddler community. It took a little while, but a problem worthy of this esteemed group came to me a couple of weeks ago, and much to my surprise, it was actually &lt;a href=&quot;https://fivethirtyeight.com/features/how-many-hoops-will-kids-jump-through-to-play-rock-paper-scissors/&quot;&gt;published!&lt;/a&gt; At the time, the following video of a unique schoolyard game had been making the rounds on Facebook and it seemed like a fun thing to model:&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/PcIord7RNAI&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;idealized-rules-of-rock-paper-scissors-hop&quot;&gt;Idealized Rules of Rock-Paper-Scissors-Hop&lt;/h2&gt;

&lt;ul&gt;
	&lt;li&gt;Kids stand at either end of N hoops.&lt;/li&gt;
	&lt;li&gt;At the start of the game (t = 0), one kid from each end starts hopping at a speed of v = 1 hoop per second until they run into each other, either in adjacent hoops or if they land in the same hoop.&lt;/li&gt;
	&lt;li&gt;At that point, they play rock-paper-scissors at a rate of 1 game per second until one of the kids wins.&lt;/li&gt;
	&lt;li&gt;The loser goes back to their end of the hoops, a new kid steps up at that end, and the winner and the new player hop until they run into each other.&lt;/li&gt;
	&lt;li&gt;This process continues until someone reaches the opposing end and that player wins!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, imagine you are a gym teacher having a bad day and you want to make sure the kids stay occupied for the entire class. If I put down 8 hoops, how long on average will the game last? How many hoops should I put down if I want the game to last for the entire 30 minute period on average?&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;Obviously, I had to have a solution in order to submit the problem (and I’ll get into that in a second), but I was flabbergasted at the kinds of the &lt;a href=&quot;https://fivethirtyeight.com/features/the-new-national-pastime-competitive-coin-flipping/&quot;&gt;solutions&lt;/a&gt; that were submitted. Multiple solvers had code that was &lt;a href=&quot;https://github.com/zsegel/538riddler/blob/master/riddler_RPS_hop.py&quot;&gt;far&lt;/a&gt; &lt;a href=&quot;https://gist.github.com/mrichards42/7c63d2ea209081f75dedfaaa08f87e86&quot;&gt;more&lt;/a&gt; &lt;a href=&quot;https://github.com/Saehry/Riddler/blob/master/2018-08-24.py&quot;&gt;elegant&lt;/a&gt; than mine and the analytical solutions from &lt;a href=&quot;https://laurentlessard.com/bookproofs/hoop-hop-showdown/&quot;&gt;Laurent Lessard&lt;/a&gt; and &lt;a href=&quot;http://math.uchicago.edu/~timblack/blog/hoops.html&quot;&gt;Tim Black&lt;/a&gt; (which cleverly involved a hyper-intelligent firefly) were mind-blowing. So please be warned ahead of time that my solution is not as pretty as those ones, but it still works… #AforEffort #YesIKnowHashtagsDontWorkInBlogs &lt;a href=&quot;https://twitter.com/search?q=%23OrDoThey&amp;amp;src=typd&quot;&gt;#OrDoThey&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The easiest solution is definitely a &lt;a href=&quot;https://en.wikipedia.org/wiki/Monte_Carlo_method&quot;&gt;Monte Carlo&lt;/a&gt; simulation. My coding language of choice is Python, but this can easily been done using pretty much any language:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import numpy as np

numHoops = 8
leftWinProb = 1.0/3.0
rightWinProb = 1.0/3.0
hopTime = 1
rpsTime = 1

timeVals = []
for numTry in range(1000000):
	if (numTry + 1)%1000 == 0:
		print('Try #' + str(numTry + 1))
	timeVals.append(hopTime)
	leftPos = 0
	rightPos = numHoops - 1
	while rightPos - leftPos &amp;gt; 1:
		timeVals[-1] += hopTime
		leftPos += 1
		rightPos -= 1
	while leftPos &amp;lt; numHoops and rightPos &amp;gt;= 0:
		timeVals[-1] += rpsTime
		rockPaperScissors = np.random.rand()
		while rockPaperScissors &amp;gt;= leftWinProb + rightWinProb:
			timeVals[-1] += rpsTime
			rockPaperScissors = np.random.rand()
		timeVals[-1] += hopTime
		if rockPaperScissors &amp;lt; leftWinProb:
			leftPos += 1
			rightPos = numHoops - 1
		elif rockPaperScissors &amp;lt; leftWinProb + rightWinProb:
			leftPos = 0
			rightPos -= 1
		while np.all([rightPos - leftPos &amp;gt; 1,leftPos &amp;lt; numHoops,rightPos &amp;gt;= 0]):
			timeVals[-1] += hopTime
			leftPos += 1
			rightPos -= 1
del numTry
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also made an &lt;a href=&quot;https://github.com/tefirman/RiddlerCode/blob/master/RockPaperScissorsHop.py&quot;&gt;analytical solution&lt;/a&gt; that calculates the time and probability of every possible path of a game and it works, but it’s a bit overkill and definitely impractical for larger hoop numbers. I honestly think the most original part of my code is the segment that generates a sample gif of a single game to demonstrate how the dynamics work. Despite my answer’s lack of elegance, I’m ultimately proud of coming up with the question and inspired by everyone’s answers. Thanks for tuning in, gang!&lt;/p&gt;</content><summary type="html">Got a riddle published in the Riddler: Life goal complete! Try your hand at a game I call 'Rock-Paper-Scissors-Hop'...</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/images/RockPaperScissorsHop.gif" /></entry></feed>
